#ifndef __ICUB_TACTILE_LEARNING_H__
#define __ICUB_TACTILE_LEARNING_H__

// system includes
#include <iostream>
#include <string>
#include <vector>

// yarp includes
#include <yarp/os/RFModule.h>
#include <yarp/os/Network.h>
#include <yarp/dev/PolyDriver.h>
#include <yarp/sig/Vector.h>

// local includes
#include <iCub/tactileLearning/constants.h>
#include <icub/tactileLearning/tactileLearningThread.h>
#include <iCub/tactileLearning/rpcCommands.h>
 
using namespace std;
using namespace yarp::os;
using namespace yarp::sig;

namespace iCub{

namespace tactileLearning{

class TactileLearning : public RFModule
{

public:

	/** 
	* Configures all the module parameters
	* @param rf is the resource finder fot parameters management
	* return true if configuration is successful, false otherwise
	*/
	bool configure(ResourceFinder& rf);

	/** 
	* Interrupts any current reads or writes attached to the port.
	* return true if operation is successful, false otherwise
	*/
	bool interruptModule(); 
	
	/** 
	* Closes and shuts down the module
	* return true if operation is successful, false otherwise
	*/
	bool close();
	
	/** 
	* Responds to messeges received via rpc port
	* @param command is the received messege representing a particular
	* operation requesto to be executed by the module
	* @param reply is the reply generated by the module
	* return true if operation is successful, false otherwise
	*/
	bool respond(const Bottle& command, Bottle& reply);
	
	/** 
	* Checks that the underlying thread is executed with the right frequency
	* return true if operation is successful, false if the module is shutting down
	*/
	bool updateModule();

private:
	
	/**
	* Determines which fingers and joints will be involved into the application
	* starting from the parameters in the configuration file.
	* @param rf is the resource finder for parameters management
	* return true is there is at least an active finger, false otherwise
	*/
	bool getFingersAndJoints(ResourceFinder& rf);

	/**
	* Prints active fingers and active joints
	*/
	void printFingersAndJoints();

	/**
	* Identifies the command in the bottle and return the correspondent enum value
	* @param commandBot is the received bottle
	* @param com is the kind of command held by commandBot
	* @param params is a bottle containing the parameters associated to the command com
	* return true if operation is successful, false otherwise 
	*/
	bool identifyCommand(Bottle commandBot, TactileLearningCommand& com, Bottle& params);

	/// the name of the module
	string moduleName;
	
	/// the name of the robot (simulator or real robot)
	string robotName;

	/// rpc input port to handle commands
	Port handlerPort;

	/// indicates which hand is used (left if it is true, right otherwise)
	bool leftHand;

	/**
	* represents which fingers are actually involved in the application. A "true" value
	* in the i-th position means that the i-th finger (starting from thumb) is active.
	*/
	bool activeFingers[NUM_FINGERS];

	/**
	* represents which joints (motors) are actually involved in the application. 
	* A "true" value in the i-th position means that the i-th joint is active.
	*/
	bool activeJoints[NUM_HAND_JOINTS];

	/// pointer to a new thread to be created and started in configure() and stopped in close()
	TactileLearningThread *thread;
	
	/// default name for the module
	static const string MODULE_NAME_DEFAULT;
	
	/// default name for the robot
	static const string ROBOT_NAME_DEFAULT;
	
	/// default name for rpc port
	static const string RPC_PORT_DEFAULT;

	/// default hand
	static const string HAND_DEFAULT;

};

} // namespace TactileLearning
} // namespace iCub

#endif // __ICUB_TACTILE_LEARNING_H__


