SET(PM_PROJECT_NAME FingertipPreprocessor)
SET(PM_PROJECT_TYPE Executable)
SET(PM_PROJECT_DEPS MathLib YARP ICUB)

cmake_minimum_required(VERSION 2.6)

set(CMAKE_VERBOSE_MAKEFILE false)

IF (NOT DEFINED PM_PROJECT_ROOT)
  MESSAGE(FATAL_ERROR "PM_PROJECT_ROOT is undefined. Try running cmake from parent directory")
ENDIF (NOT DEFINED PM_PROJECT_ROOT)


SET(PM_INC_BASE include)
SET(PM_SRC_BASE src)
SET(PM_LIB_BASE lib)
SET(PM_MOD_BASE module)
SET(PM_BIN_BASE bin)




PROJECT(${PM_PROJECT_NAME})

#SET(${PM_PROJECT_NAME}_DIR ${CMAKE_CURRENT_SOURCE_DIR} PARENT_SCOPE)
#MESSAGE(STATUS ${PM_PROJECT_NAME}_DIR " " ${${PM_PROJECT_NAME}_DIR})

SET(PM_LIB_PATH  ${CMAKE_CURRENT_SOURCE_DIR}/${PM_LIB_BASE})
SET(PM_BIN_PATH  ${CMAKE_CURRENT_SOURCE_DIR}/${PM_BIN_BASE})
SET(PM_SRC_PATH  ${CMAKE_CURRENT_SOURCE_DIR}/${PM_SRC_BASE})
SET(PM_INC_PATH  ${CMAKE_CURRENT_SOURCE_DIR}/${PM_INC_BASE})

SET(PM_BIN_GPATH  ${PM_PROJECT_ROOT}/${PM_BIN_BASE})
#SET(PM_INC_GPATH  ${PM_PROJECT_ROOT}/${PM_INC_BASE})

FILE(GLOB PM_SOURCEFILES ${PM_SRC_PATH}/*.cpp ${PM_SRC_PATH}/*.c)
FILE(GLOB PM_HEADERFILES ${PM_INC_PATH}/*.h)





IF(PM_PROJECT_DEPS)
  SET(DEPS_RESOLVED FALSE)
  SET(FULL_PROJECT_DEPS )
  SET(FULL_EXTERNAL_DEPS )
  SET(FULL_EXTERNAL_INCDIR )
  SET(FULL_EXTERNAL_LIBS )
  SET(FULL_EXTERNAL_LIBDIR )
  WHILE(NOT DEPS_RESOLVED)

    SET(FULL_PROJECT_DEPS ${PM_PROJECT_DEPS})
    SET(FULL_EXTERNAL_DEPS ${PM_EXTERNAL_DEPS})
    SET(FULL_EXTERNAL_INCDIR ${PM_EXTERNAL_INCDIR})
    SET(FULL_EXTERNAL_LIBS ${PM_EXTERNAL_LIBS})
    SET(FULL_EXTERNAL_LIBDIR ${PM_EXTERNAL_LIBDIR})

    FOREACH(DEP_NAME ${PM_PROJECT_DEPS})
      FIND_PACKAGE(${DEP_NAME} REQUIRED)
      LIST(APPEND FULL_PROJECT_DEPS ${${DEP_NAME}_DEPENDENCIES})
      LIST(APPEND FULL_EXTERNAL_DEPS ${${DEP_NAME}_EXT_DEPENDENCIES})
      LIST(APPEND FULL_EXTERNAL_INCDIR ${${DEP_NAME}_INCDIR_DEPENDENCIES})
      LIST(APPEND FULL_EXTERNAL_LIBS ${${DEP_NAME}_LIBS_DEPENDENCIES})
      LIST(APPEND FULL_EXTERNAL_LIBDIR ${${DEP_NAME}_LIBDIR_DEPENDENCIES})
    ENDFOREACH(DEP_NAME)
    LIST(REMOVE_DUPLICATES FULL_PROJECT_DEPS)
    IF(FULL_EXTERNAL_DEPS)
        LIST(REMOVE_DUPLICATES FULL_EXTERNAL_DEPS)
    ENDIF(FULL_EXTERNAL_DEPS)
    IF(FULL_EXTERNAL_INCDIR)
        LIST(REMOVE_DUPLICATES FULL_EXTERNAL_INCDIR)
    ENDIF(FULL_EXTERNAL_INCDIR)
    IF(FULL_EXTERNAL_LIBS)
        LIST(REMOVE_DUPLICATES FULL_EXTERNAL_LIBS)
    ENDIF(FULL_EXTERNAL_LIBS)
    IF(FULL_EXTERNAL_LIBDIR)
        LIST(REMOVE_DUPLICATES FULL_EXTERNAL_LIBDIR)
    ENDIF(FULL_EXTERNAL_LIBDIR)

    IF (FULL_PROJECT_DEPS STREQUAL PM_PROJECT_DEPS)
      SET(PM_EXTERNAL_DEPS ${FULL_EXTERNAL_DEPS})
      SET(PM_EXTERNAL_INCDIR ${FULL_EXTERNAL_INCDIR})
      SET(PM_EXTERNAL_LIBS ${FULL_EXTERNAL_LIBS})
      SET(PM_EXTERNAL_LIBDIR ${FULL_EXTERNAL_LIBDIR})
      SET(DEPS_RESOLVED TRUE)
    ELSE (FULL_PROJECT_DEPS STREQUAL PM_PROJECT_DEPS)
      SET(PM_PROJECT_DEPS  ${FULL_PROJECT_DEPS})
      SET(PM_EXTERNAL_DEPS ${FULL_EXTERNAL_DEPS})
      SET(PM_EXTERNAL_INCDIR ${FULL_EXTERNAL_INCDIR})
      SET(PM_EXTERNAL_LIBS ${FULL_EXTERNAL_LIBS})
      SET(PM_EXTERNAL_LIBDIR ${FULL_EXTERNAL_LIBDIR})
    ENDIF (FULL_PROJECT_DEPS STREQUAL PM_PROJECT_DEPS)

  ENDWHILE(NOT DEPS_RESOLVED)
  MESSAGE(STATUS "${PM_PROJECT_NAME} has dependencies to <${PM_PROJECT_DEPS}>")
ELSE(PM_PROJECT_DEPS)
  MESSAGE(STATUS "${PM_PROJECT_NAME} has no dependency")
ENDIF(PM_PROJECT_DEPS)

IF(PM_EXTERNAL_DEPS)
  MESSAGE(STATUS "${PM_PROJECT_NAME} has external dependencies to <${PM_EXTERNAL_DEPS}>")
ELSE(PM_EXTERNAL_DEPS)
  MESSAGE(STATUS "${PM_PROJECT_NAME} has no external dependency")
ENDIF(PM_EXTERNAL_DEPS)

IF(PM_EXTERNAL_INCDIR)
  MESSAGE(STATUS "${PM_PROJECT_NAME} has external include path dependencies to <${PM_EXTERNAL_INCDIR}>")
ELSE(PM_EXTERNAL_INCDIR)
  MESSAGE(STATUS "${PM_PROJECT_NAME} has no external include path dependency")
ENDIF(PM_EXTERNAL_INCDIR)

IF(PM_EXTERNAL_LIBS)
  MESSAGE(STATUS "${PM_PROJECT_NAME} has external library dependencies to <${PM_EXTERNAL_LIBS}>")
ELSE(PM_EXTERNAL_LIBS)
  MESSAGE(STATUS "${PM_PROJECT_NAME} has no external library dependency")
ENDIF(PM_EXTERNAL_LIBS)

IF(PM_EXTERNAL_LIBDIR)
  MESSAGE(STATUS "${PM_PROJECT_NAME} has external library path dependencies to <${PM_EXTERNAL_LIBDIR}>")
ELSE(PM_EXTERNAL_LIBDIR)
  MESSAGE(STATUS "${PM_PROJECT_NAME} has no external library path dependency")
ENDIF(PM_EXTERNAL_LIBDIR)












FOREACH(DEP_NAME ${PM_EXTERNAL_DEPS})
  IF(${DEP_NAME} STREQUAL Qt4)
    FIND_PACKAGE(Qt4 COMPONENTS QtCore QtGui QtOpenGL REQUIRED)
    SET(QT_USE_QTOPENGL true)
    INCLUDE(${QT_USE_FILE})
    INCLUDE_DIRECTORIES(${QT_INCLUDES})
    IF(DEFINED PM_QTMOC_FILES)
      SET(MOC_SOURCES "")
      FOREACH(MOC_NAME ${PM_QTMOC_FILES})
        SET(MOC_SOURCES ${MOC_SOURCES} ${PM_INC_PATH}/${MOC_NAME}.h)
      ENDFOREACH(MOC_NAME)
      QT4_WRAP_CPP(MOCED_SOURCES
                   ${MOC_SOURCES})
    ENDIF(DEFINED PM_QTMOC_FILES)
  ELSEIF(${DEP_NAME} STREQUAL ROS)
    MESSAGE(STATUS "${PM_PROJECT_NAME}: Setting up ROS dependencies")
    EXECUTE_PROCESS(COMMAND rospack find      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} RESULT_VARIABLE PM_ROSPACK_FIND_RESULT OUTPUT_VARIABLE PM_ROS_TEMP)
    IF(NOT PM_ROSPACK_FIND_RESULT EQUAL 0)
        MESSAGE(SEND_ERROR "${PM_PROJECT_NAME}:   rospack error: cannot find the ROS package ${PM_PROJECT_NAME}\n Check that the environment variable ROS_PACKAGE_PATH points to ${CMAKE_CURRENT_SOURCE_DIR}/..\n and that the folder ${CMAKE_CURRENT_SOURCE_DIR} contains a ROS-compatible manifest.xml file")
    ENDIF(NOT PM_ROSPACK_FIND_RESULT EQUAL 0)
    

    MESSAGE(STATUS "${PM_PROJECT_NAME}:   Include paths and cflags")
    EXECUTE_PROCESS(COMMAND rospack cflags-only-I       WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} OUTPUT_STRIP_TRAILING_WHITESPACE OUTPUT_VARIABLE PM_ROS_INCDIR)
    EXECUTE_PROCESS(COMMAND rospack cflags-only-other   WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} OUTPUT_STRIP_TRAILING_WHITESPACE OUTPUT_VARIABLE PM_ROS_CXXFLAGS)
    #STRING(REPLACE " " ";" PM_ROS_CXXFLAGS ${PM_ROS_CXXFLAGS})
    
    MESSAGE(STATUS "${PM_PROJECT_NAME}:   Library paths and linking options")
    EXECUTE_PROCESS(COMMAND rospack libs-only-l         WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} OUTPUT_STRIP_TRAILING_WHITESPACE OUTPUT_VARIABLE PM_ROS_LIBRARIES)
    EXECUTE_PROCESS(COMMAND rospack libs-only-L         WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} OUTPUT_STRIP_TRAILING_WHITESPACE OUTPUT_VARIABLE PM_ROS_LIBPATH)
    EXECUTE_PROCESS(COMMAND rospack libs-only-other     WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} OUTPUT_STRIP_TRAILING_WHITESPACE OUTPUT_VARIABLE PM_ROS_LINKOPTS)
    #STRING(REPLACE " " ";" PM_ROS_LINKOPTS ${PM_ROS_LINKOPTS})
    MESSAGE(STATUS "${PM_PROJECT_NAME}:   Done...")

    LIST(LENGTH PM_ROS_CXXFLAGS PM_ROS_CXXFLAGS_LENGTH)
    IF(PM_ROS_CXXFLAGS_LENGTH GREATER 0)
        ADD_DEFINITIONS(${PM_ROS_CXXFLAGS})
    ENDIF(PM_ROS_CXXFLAGS_LENGTH GREATER 0)

    LIST(LENGTH PM_ROS_INCDIR PM_ROS_INCDIR_LENGTH)
    IF(PM_ROS_INCDIR_LENGTH GREATER 0)
        STRING(REPLACE " " ";" PM_ROS_INCDIR ${PM_ROS_INCDIR})
        LIST(APPEND PM_EXTERNAL_INCDIR ${PM_ROS_INCDIR})
        LIST(REMOVE_DUPLICATES PM_EXTERNAL_INCDIR)
    ENDIF(PM_ROS_INCDIR_LENGTH GREATER 0)


    LIST(LENGTH PM_ROS_LIBPATH PM_ROS_LIBPATH_LENGTH)     
    IF(PM_ROS_LIBPATH_LENGTH GREATER 0)
        STRING(REPLACE " " ";" PM_ROS_LIBPATH ${PM_ROS_LIBPATH})
        LIST(APPEND PM_EXTERNAL_LIBDIR ${PM_ROS_LIBPATH})
        LIST(REMOVE_DUPLICATES PM_EXTERNAL_LIBDIR)
    ENDIF(PM_ROS_LIBPATH_LENGTH GREATER 0)

    LIST(LENGTH PM_ROS_LIBRARIES PM_ROS_LIBRARIES_LENGTH)
    IF(PM_ROS_LIBRARIES_LENGTH GREATER 0)
        STRING(REPLACE " " ";" PM_ROS_LIBRARIES ${PM_ROS_LIBRARIES})
        LIST(APPEND PM_EXTERNAL_LIBS ${PM_ROS_LIBRARIES})
        LIST(REMOVE_DUPLICATES PM_EXTERNAL_LIBS)
    ENDIF(PM_ROS_LIBRARIES_LENGTH GREATER 0)


  ELSE(${DEP_NAME} STREQUAL Qt4)
    FIND_PACKAGE(${DEP_NAME} REQUIRED)
    STRING(TOUPPER ${DEP_NAME} UPPER_DEP_NAME)

    IF (DEFINED ${DEP_NAME}_INCLUDE_DIRS)
      INCLUDE_DIRECTORIES(${${DEP_NAME}_INCLUDE_DIRS})
    ELSEIF (DEFINED ${UPPER_DEP_NAME}_INCLUDE_DIRS)
      INCLUDE_DIRECTORIES(${${UPPER_DEP_NAME}_INCLUDE_DIRS})
    ENDIF (DEFINED ${DEP_NAME}_INCLUDE_DIRS)
    IF (DEFINED ${DEP_NAME}_INCLUDE_DIR)
      INCLUDE_DIRECTORIES(${${DEP_NAME}_INCLUDE_DIR})
    ELSEIF (DEFINED ${UPPER_DEP_NAME}_INCLUDE_DIR)
      INCLUDE_DIRECTORIES(${${UPPER_DEP_NAME}_INCLUDE_DIR})
    ENDIF (DEFINED ${DEP_NAME}_INCLUDE_DIR)

  ENDIF(${DEP_NAME} STREQUAL Qt4)
ENDFOREACH(DEP_NAME)





INCLUDE_DIRECTORIES(${PM_INC_PATH} ${PM_EXTERNAL_INCDIR})
FOREACH(DEP_NAME ${PM_PROJECT_DEPS})
  INCLUDE_DIRECTORIES(${${DEP_NAME}_INCLUDE_DIR})
  INCLUDE_DIRECTORIES(${${DEP_NAME}_INCLUDE_DIRS})
ENDFOREACH(DEP_NAME)


IF (${PM_PROJECT_TYPE} STREQUAL Library)
  FILE(MAKE_DIRECTORY ${PM_LIB_PATH})
  FILE(MAKE_DIRECTORY ${PM_INC_PATH}/${PM_PROJECT_NAME})

  #SET(LIBRARY_OUTPUT_PATH ${PM_LIB_PATH})
  #SET(LIBRARY_OUTPUT_DIRECTORY ${PM_LIB_PATH})

  SET(HFILES )
  FOREACH(HFILE ${PM_HEADERFILES})
    GET_FILENAME_COMPONENT(TEMP_HFILE ${HFILE} NAME)
    GET_FILENAME_COMPONENT(TEMP_HPATH ${HFILE} PATH)
    ADD_CUSTOM_COMMAND(OUTPUT ${TEMP_HPATH}/${PM_PROJECT_NAME}/${TEMP_HFILE} COMMAND ln -sf  ${HFILE} ${TEMP_HPATH}/${PM_PROJECT_NAME}/${TEMP_HFILE} )
    SET(HFILES ${HFILES} ${TEMP_HPATH}/${PM_PROJECT_NAME}/${TEMP_HFILE})
  ENDFOREACH(HFILE)




  ADD_LIBRARY(${PM_PROJECT_NAME} SHARED ${PM_SOURCEFILES} ${PM_HEADERFILES} ${MOCED_SOURCES} ${HFILES})

  
  SET_TARGET_PROPERTIES(${PM_PROJECT_NAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${PM_LIB_PATH})
 
 

ELSEIF (${PM_PROJECT_TYPE} STREQUAL Executable)
  FILE(MAKE_DIRECTORY ${PM_BIN_GPATH})

  LINK_DIRECTORIES(${PM_EXTERNAL_LIBDIR})

  ADD_EXECUTABLE(${PM_PROJECT_NAME} ${PM_SOURCEFILES} ${PM_HEADERFILES} ${MOCED_SOURCES})
  SET_TARGET_PROPERTIES(${PM_PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${PM_BIN_PATH})
    
  FOREACH(DEP_NAME ${PM_PROJECT_DEPS})
    TARGET_LINK_LIBRARIES(${PM_PROJECT_NAME} ${${DEP_NAME}_LIBRARIES})
  ENDFOREACH(DEP_NAME)
  FOREACH(DEP_NAME ${PM_EXTERNAL_DEPS})
    IF(${DEP_NAME} STREQUAL Qt4)
      TARGET_LINK_LIBRARIES(${PM_PROJECT_NAME} ${QT_LIBRARIES})
    ELSE(${DEP_NAME} STREQUAL Qt4)
      STRING(TOUPPER ${DEP_NAME} UPPER_DEP_NAME)
      TARGET_LINK_LIBRARIES(${PM_PROJECT_NAME} ${${DEP_NAME}_LIBRARIES})
      IF(NOT ${DEP_NAME} STREQUAL ${UPPER_DEP_NAME})
          TARGET_LINK_LIBRARIES(${PM_PROJECT_NAME} ${${UPPER_DEP_NAME}_LIBRARIES})
      ENDIF(NOT ${DEP_NAME} STREQUAL ${UPPER_DEP_NAME})
    ENDIF(${DEP_NAME} STREQUAL Qt4)
  ENDFOREACH(DEP_NAME)

  TARGET_LINK_LIBRARIES(${PM_PROJECT_NAME} ${PM_EXTERNAL_LIBS})

  ADD_CUSTOM_COMMAND(TARGET ${PM_PROJECT_NAME} POST_BUILD COMMAND ln -sf ${PM_BIN_PATH}/${PM_PROJECT_NAME} ${PM_BIN_GPATH}/)

ELSE (${PM_PROJECT_TYPE} STREQUAL Library)
  MESSAGE(FATAL_ERROR "Variable PM_PROJECT_TYPE <${PM_PROJECT_TYPE}> not set...")

ENDIF (${PM_PROJECT_TYPE} STREQUAL Library)


