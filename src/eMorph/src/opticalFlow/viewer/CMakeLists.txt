CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

SET(PROJECTNAME opticalFlowViewer)
PROJECT(${PROJECTNAME})

SET(YARP_DIR "$ENV{YARP_ROOT}" CACHE LOCATION "where is yarp?")
FIND_PACKAGE(YARP)
FIND_PACKAGE(ICUB)
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${ICUB_DIR}/conf ${YARP_DIR}/conf)

#SET(GSL_DIR "$ENV{YARP_ROOT}/../conf" CACHE LOCATION "where is GSL?")
FIND_PACKAGE(GSL REQUIRED)
#LINK_LIBRARIES(${GSL_LIBRARIES})
INCLUDE_DIRECTORIES(${GSL_INCLUDE_DIRS})

# support library for vecBuffer devices and interfaces
#FIND_PACKAGE(VECBUFFER REQUIRED)
#LINK_LIBRARIES(vecBuffer)
INCLUDE_DIRECTORIES(${vecBuffer_INCLUDE_DIRS})

#FIND_PACKAGE(MATRIXPP REQUIRED)
#LINK_LIBRARIES(${MATRIXPP_LIBRARIES})
#INCLUDE_DIRECTORIES(${MATRIXPP_INCLUDE_DIRS})

#FIND_PACKAGE(VECTORPP REQUIRED)
#LINK_LIBRARIES(${VECTORPP_LIBRARIES})
#INCLUDE_DIRECTORIES(${VECTORPP_INCLUDE_DIRS})

FILE(GLOB folder_source src/*.cpp)
FILE(GLOB folder_header include/*.h)

SOURCE_GROUP("Source Files" FILES ${folder_source})
SOURCE_GROUP("Header Files" FILES ${folder_header})

INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR})
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/include)
INCLUDE_DIRECTORIES(${YARP_INCLUDE_DIRS})

#To link the unmasked_buffer class
#AUX_SOURCE_DIRECTORY($ENV(TCP2YARP)/src auxsrc)

ADD_EXECUTABLE(${PROJECTNAME} 	${folder_source} ${folder_header})

TARGET_LINK_LIBRARIES (	${PROJECTNAME} 
            			${YARP_LIBRARIES}
				vecBuffer
				${GSL_LIBRARIES})

#SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/build)
#SET(EXECUTABLE_OUTPUT_PATH $ENV{MODULES_ROOT}/bin)
INSTALL_TARGETS(/bin ${PROJECTNAME})
