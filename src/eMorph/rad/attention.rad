###
### SCALE: 75
### CSLUVERSION: 2.0.0
###
set Coord "-452.0 357.0 1516.0 1254.0"

#----------------------------------------------------------------------------
# Packages
#----------------------------------------------------------------------------
requirePackage Base {Built-in RAD object types} {Copyright (C) 1996-2002 Center for Spoken Language Understanding
  OGI School of Science & Engineering
  Oregon Health & Science University} http://cslu.cse.ogi.edu/toolkit/docs/2.0/apps/rad/objects/index.html#base
#----------------------------------------------------------------------------


##### ROOT SCREEN
set offsetX [expr $x - -452.0]
set offsetY [expr $y - 357.0]
set p $ObjectTypes(activeScreen)

# input_23
set x0 [expr 117.0 + $offsetX] 
set y0 [expr 357.0 + $offsetY] 
set obvar [newO input $x0 $y0 {no 1}]
set r(input_23) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {start}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}

# action_24
set x0 [expr 117.0 + $offsetX] 
set y0 [expr 687.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_24) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {CheckConnections}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set ConnectionStatus [ConnectionChecker_Connect]

if { $ConnectionStatus == 0 } {
Say "Connections missing"
} else {
Say "OK"
}}

# prect_25
set x0 [expr 117.0 + $offsetX] 
set y0 [expr 747.0 + $offsetY] 
set obvar [newO prect $x0 $y0 {no 2}]
set r(prect_25) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {check}
set ob(dtmf,interrupt) {0}
set ob(words) {{{{$ConnectionStatus == 1}} {} {}} {{{$ConnectionStatus == 0}} {} {}}}
set ob(grammar) {{} {}}

# action_26
set x0 [expr 117.0 + $offsetX] 
set y0 [expr 837.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_26) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {Entry_Point}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {Say "Ready."}

# queryone_27
set x0 [expr 297.0 + $offsetX] 
set y0 [expr 807.0 + $offsetY] 
set obvar [newO queryone $x0 $y0 {no 3}]
set r(queryone_27) $obvar
upvar #0 $obvar ob
set ob(gif_original) {C:/Program Files/CSLU/Toolkit/2.0/apps/rad/base/gif/generic.gif}
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(changetrigger) {5}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(gif_tmmods) {C:/Program Files/CSLU/Toolkit/2.0/apps/rad/packages/Tucker-Maxon/gif_alt/generic.gif}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(prompt,markupText) {<SABLE></SABLE>
}
set ob(action1) {Say "Retry, skip or give-up?"}
set ob(recogportType,0) {Words}
set ob(recogportType,1) {Words}
set ob(override:repair) {0}
set ob(recogportType,2) {Words}
set ob(override:tts) {0}
set ob(repairStatus) {default}
set ob(changerate) {5}
set ob(dynamicWords) {{retry {9r i: tc th 9r aI}} {skip {s kc kh I pc ph}} {give-up {gc g I v & pc ph}}}
set ob(dyn:recog) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(portType,0) {Undefined}
set ob(portType,1) {Undefined}
set ob(package) {Base}
set ob(portType,2) {Undefined}
set ob(override:caption) {0}
set ob(name) {Handle_connections}
set ob(dtmf,interrupt) {0}
set ob(words) {{retry {} {{{9r i: tc th 9r aI}}}} {skip {} {{{s kc kh I pc ph}}}} {give-up {} {{{gc g I v & pc ph}}}}}
set ob(grammar) {{{} {}} {{} {}} {{} {}}}
set ob(recognizer) {name adult_english_16khz_0.ob}

# action_28
set x0 [expr 117.0 + $offsetX] 
set y0 [expr 627.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_28) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {module_MILmanager}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {Port managerPort
managerPort open "/RAD/HRI:o"
Port speechPort
speechPort open "/RAD/Speech:o"

Port karmaManagerPort
karmaManagerPort open "/RAD/karmaManager:o"

Port karmaLearnPort
karmaLearnPort open "/RAD/karmaLearn:o"

if {$usingRobot == 1} {
	#ConnectionChecker_Add "/RAD/HRI:o" "/iolStateMachineHandler/human:rpc"
	ConnectionChecker_Add "/RAD/Speech:o" "/iSpeak"
	#ConnectionChecker_Add "/RAD/karmaManager:o" "/karmaManager/human:rpc"
	#ConnectionChecker_Add "/RAD/karmaLearn:o" "/karmaLearn/rpc"

}

#DEFINES USEFULL PROCEDURES

proc MIL_reset { } {

	#bottle clear
	#bottle addString "home"
	#managerPort write bottle reply
	#puts [reply toString]

	bottle clear
	bottle addString "attention"
	bottle addString "stop"
	managerPort write bottle reply
	puts [reply toString]
	
}

proc KarmaManager_train { objectName } {

	bottle clear
	bottle addString "train"
	bottle addString $objectName
	karmaManagerPort write bottle reply
	puts [reply toString]
	
}

proc KarmaManager_eval { objectName } {

	bottle clear
	bottle addString "test"
	bottle addString $objectName
	karmaManagerPort write bottle reply
	puts [reply toString]
	
}

proc Speak { text } {
	bottle clear
	bottle addString $text
	speechPort write bottle
	puts "sent:"
	puts [bottle toString]
}

proc MIL_What_Is { } {
	bottle clear
	bottle addString "what"
	managerPort write bottle reply
	return  [ [reply get 0] toString]
}

proc MIL_track_start { } {

	bottle clear
	bottle addString "track"
	bottle addString "start"
	managerPort write bottle reply
	puts [reply toString]
}

proc MIL_track_stop { } {

	bottle clear
	bottle addString "track"
	bottle addString "stop"
	managerPort write bottle reply
	puts [reply toString]
}

proc MIL_populate_name { objectName } {

	bottle clear
	bottle addString "name"
	bottle addString $objectName
	managerPort write bottle reply
	puts [reply toString]
}


proc MIL_Calibrate_Table { } {

	bottle clear
	bottle addString "cata"
	managerPort write bottle reply
	puts [reply toString]

}

proc MIL_Home { } {

	bottle clear
	bottle addString "home"
	managerPort write bottle reply
	puts [reply toString]

}

proc MIL_Where_Is { objectName } {

	bottle clear
	bottle addString "where"
	bottle addString $objectName
	managerPort write bottle reply
	puts "[ [reply get 0] asString]"
	return  [ [reply get 0] toString]
}

proc MIL_Take { objectName } {

	bottle clear
	bottle addString "take"
	bottle addString $objectName
	managerPort write bottle reply
	puts "[ [reply get 0] asString]"
	return  [ [reply get 0] toString]
}

proc MIL_Take_Hold { objectName } {

	bottle clear
	bottle addString "hold"
	bottle addString $objectName
	managerPort write bottle reply
	puts "[ [reply get 0] asString]"
	return  [ [reply get 0] toString]
}

proc MIL_Drop { } {

	bottle clear
	bottle addString "drop"
	managerPort write bottle reply
	puts "[ [reply get 0] asString]"
	return  [ [reply get 0] toString]
}

proc MIL_Drop_On { objectName } {

	bottle clear
	bottle addString "drop"
	bottle addString $objectName
	managerPort write bottle reply
	puts "[ [reply get 0] asString]"
	return  [ [reply get 0] toString]
}

proc MIL_Touch { objectName } {

	bottle clear
	bottle addString "touch"
	bottle addString $objectName
	managerPort write bottle reply
	puts "[ [reply get 0] asString]"
	return  [ [reply get 0] toString]
}

proc MIL_Push { objectName } {

	bottle clear
	bottle addString "push"
	bottle addString $objectName
	managerPort write bottle reply
	puts "[ [reply get 0] asString]"
	return  [ [reply get 0] toString]
}

proc MIL_Reward { rewardValue } {

	bottle clear
	bottle addString $rewardValue

	managerPort write bottle reply
	puts [reply toString]

}

proc MIL_Calib_Kin_Start { side objectName } {

	puts "side is $side"
	puts "obj is $objectName"

	bottle clear
	bottle addString "caki"
	bottle addString "start"
	bottle addString $side
	bottle addString $objectName

	managerPort write bottle reply
	puts "and the reply is...."
	puts [reply toString]
	puts "ok now going ahead...."
	return  [ [reply get 0] toString]
}

proc MIL_Calib_Kin_Stop { } {

	bottle clear
	bottle addString "caki"
	bottle addString "stop"
	managerPort write bottle reply
	puts [reply toString]

}

proc MIL_Forget_Obj { objectName } {

	bottle clear
	bottle addString "forget"
	bottle addString $objectName
	managerPort write bottle reply
	puts [reply toString]

}

proc KARMA_Forget { objectName } {
	
	bottle clear
	bottle addString "clear"
	bottle addString $objectName
	karmaLearnPort write bottle reply
	puts [reply toString]
}}

# subnet_29
set x0 [expr 117.0 + $offsetX] 
set y0 [expr 507.0 + $offsetY] 
set obvar [newO subnet $x0 $y0 {no 1}]
set r(subnet_29) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {Initialisation_Procedures}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}

# action_30
set x0 [expr 117.0 + $offsetX] 
set y0 [expr 567.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_30) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {module_microsoft_SAPI}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {Port SpeechManagerPort
SpeechManagerPort open "/RAD/speechRecognizer:o"
if {$usingRobot == 1} {
ConnectionChecker_Add "/RAD/speechRecognizer:o" "/speechRecognizer/rpc"
}
#DEFINES USEFULL PROCEDURES

proc Say { what } {
	bottle clear
	reply clear
	bottle addString "tts"
	bottle addString $what
	SpeechManagerPort write bottle reply
	puts "Say : $what "
	#tts $what
}

proc SM_RGM_Expand_Auto { vocabulory } {
	bottle clear
	bottle addString "RGM"
	bottle addString "vocabulory"
	bottle addString "addAuto"
	bottle addString $vocabulory
	SpeechManagerPort write bottle reply
	#puts "Received from SpeechManager : [reply toString] "
	return  [ [reply get 1] toString] 
}

proc SM_RGM_Expand { vocabulory  word } {
	bottle clear
	bottle addString "RGM"
	bottle addString "vocabulory"
	bottle addString "add"
	bottle addString $vocabulory
	bottle addString $word
	
	SpeechManagerPort write bottle reply
	#puts "Received from SpeechManager : [reply toString] "
}

proc SM_Expand_asyncrecog { gram } {

	bottle clear
	bottle addString "asyncrecog"
	bottle addString "addGrammar"
	bottle addString $gram
	SpeechManagerPort write bottle reply
	#puts "Received from SpeechManager : [reply toString] "
}

proc SM_Reco_Grammar { gram } {

	bottle clear
	bottle addString "recog"
	bottle addString "grammarSimple"
	bottle addString $gram
	SpeechManagerPort write bottle reply
	puts "Received from SpeechManager : [reply toString] "
	set wordsList ""
	for { set i 1 } { $i< [reply size] } {incr i 2} {
		set wordsList [lappend wordsList [ [reply get $i] toString] ]
	}
	return $wordsList
}

proc SM_Reco_Dictation { } {
	bottle clear
	bottle addString "recog"
	bottle addString "dictation"
	SpeechManagerPort write bottle reply
	puts "Received from SpeechManager : [reply toString] "
	set wordsList ""
	for { set i 1 } { $i< [reply size] } {incr i 2} {
		set wordsList [lappend wordsList [ [reply get $i] toString] ]
	}
	return $wordsList
}}

# action_31
set x0 [expr -33.0 + $offsetX] 
set y0 [expr 777.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_31) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {initialise_Vocabulories}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {#Vocabulory for objects
puts "Initialising vocabulory..."

set w1 "null"
set w2 "null"
set w3 "null"
set w4 "null"
set w5 "null"
set w6 "null"
set w7 "null"
set w8 "null"
set w9 "null"
set w10 "null"
set w11 "null"
set w12 "null"
set w13 "null"
set w14 "null"
set w15 "null"
set w16 "null"

set VOCABULORY "{purple-car} octopus lego {pink-ball} box toy left middle right"

getIDs $VOCABULORY w1 w2 w3 w4 w5 w6 w7 w8 w9 w10 w11 w12 w13 w14 w15 w16

puts "the objects are: $w1 $w2 $w3 $w4 $w5 $w6 $w7 $w8 $w9 $w10 $w11 $w12 $w13 $w14 $w15 $w16"

if { $w1 == "ack" } {
	set VOCABULORY "$w2 $w3 $w4 $w5 $w6 $w7 $w8 $w9 $w10 $w11 $w12 $w13 $w14 $w15 $w16"
} else {
	
}

for { set i 0 } { $i < [llength $VOCABULORY] } { incr i 1 } {
	puts "Expanding vocabulory Object with \"[lindex $VOCABULORY $i]\""
	SM_RGM_Expand "#Object" [lindex $VOCABULORY $i]
}


#Vocabulory for Actions
puts "Initialising vocabulory..."

set VOCABULORY "{point at} {what is this}"

for { set i 0 } { $i < [llength $VOCABULORY] } { incr i 1 } {
	puts "Expanding vocabulory Object with \"[lindex $VOCABULORY $i]\""
	SM_RGM_Expand "#Action" [lindex $VOCABULORY $i]
}

puts "Adding stuff to the async grammar"
SM_Expand_asyncrecog "icub-stop-now"}

# action_32
set x0 [expr 207.0 + $offsetX] 
set y0 [expr 1077.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_32) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {Menu}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set results -1


while { $results == -1 } {
	Say "What should I do?"
	set g "Return to home position | Calibrate on table | Where is the #Object | Take the #Object | See you soon  | I will teach you a new object | Touch the #Object | Push the #Object | Let me show you how to reach the #Object with your right arm | 
	Let me show you how to reach the #Object with your left arm | Forget #Object | Forget all objects | Execute a plan | What is this | Learn the #Object | Test the #Object | Look around | Explore track | Explore events" 
	set results [SM_Reco_Grammar $g ]
	puts "Reco : $results"
}
set recoValue [lindex $results 0]}

# prect_33
set x0 [expr 207.0 + $offsetX] 
set y0 [expr 1137.0 + $offsetY] 
set obvar [newO prect $x0 $y0 {no 16}]
set r(prect_33) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(prompt,markupText) {<SABLE></SABLE>
}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {Choose_action}
set ob(dtmf,interrupt) {0}
set ob(words) {{{{$recoValue == "Calibrate"}} {} {}} {{{$recoValue == "Where"}} {} {}} {{{$recoValue == "See"}} {} {}} {{{$recoValue == "I"}} {} {}} {{{$recoValue == "Take"}} {} {}} {{{$recoValue == "Return"}} {} {}} {{{$recoValue == "Touch"}} {} {}} {{{$recoValue == "Push"}} {} {}} {{{$recoValue == "Let"}} {} {}} {{{$recoValue == "Forget"}} {} {}} {{{$recoValue == "Execute"}} {} {}} {{{$recoValue == "What"}} {} {}} {{{$recoValue == "Learn"}} {} {}} {{{$recoValue == "Test"}} {} {}} {{{$recoValue == "Look"}} {} {}} {{{$recoValue == "Explore"}} {} {}}}
set ob(grammar) {{} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {}}

# action_34
set x0 [expr -3.0 + $offsetX] 
set y0 [expr 1197.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_34) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {Calibrate}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {MIL_Calibrate_Table
Say "OK, I know the table height"}

# action_35
set x0 [expr 57.0 + $offsetX] 
set y0 [expr 1317.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_35) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {Where_is}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set whereIsResult [MIL_Where_Is $objectName]}

# action_36
set x0 [expr -3.0 + $offsetX] 
set y0 [expr 1497.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_36) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {isItGood}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set results -1

while { $results == -1 } {

	#Say "beep"
	set g "Yes you are | No here it is | Skip it"
	set results [SM_Reco_Grammar $g]

}
set reward [lindex $results 0]

if { $reward == "Yes" } {
	MIL_Reward "ack"
} 
if { $reward == "No" } {
	MIL_Reward "nack"
} 
if { $reward == "Skip" } {
	MIL_Reward "skip"
}}

# prect_37
set x0 [expr 57.0 + $offsetX] 
set y0 [expr 1407.0 + $offsetY] 
set obvar [newO prect $x0 $y0 {no 3}]
set r(prect_37) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(prompt,markupText) {<SABLE></SABLE>
}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {isObjectFound}
set ob(dtmf,interrupt) {0}
set ob(words) {{{{$whereIsResult == "ack"}} {} {}} {{{$whereIsResult == "nack"}} {} {}} {1 {} {}}}
set ob(grammar) {{} {} {}}

# action_38
set x0 [expr 117.0 + $offsetX] 
set y0 [expr 1467.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_38) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {bug}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {Say "AI AI AI! I cannot parse the reply!"}

# action_39
set x0 [expr 147.0 + $offsetX] 
set y0 [expr 1257.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_39) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {quit}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {Say "OK. Bye bye!"}

# action_40
set x0 [expr 117.0 + $offsetX] 
set y0 [expr 417.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_40) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {isUsingRobot}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set usingRobot 1}

# action_41
set x0 [expr 57.0 + $offsetX] 
set y0 [expr 1497.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_41) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {noOctopus}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set results -1

while { $results == -1 } {

	#Say "I did not find the $objectName is it so?"
	set g "You are right | No here it is | Skip it"
	set results [SM_Reco_Grammar $g]

}
set reward [lindex $results 0]

if { $reward == "Yes" } {
	MIL_Reward "ack"
} 
if { $reward == "No" } {
	MIL_Reward "nack"
} 
if { $reward == "Skip" } {
	MIL_Reward "skip"
}}

# action_42
set x0 [expr 117.0 + $offsetX] 
set y0 [expr 987.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_42) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {go_to_home}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {MIL_Home}

# action_43
set x0 [expr 207.0 + $offsetX] 
set y0 [expr 1587.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_43) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {newObject}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {MIL_track_stop 
set objectName [SM_RGM_Expand_Auto "#Object"]
MIL_populate_name $objectName
puts "New word added to vocabulory : $objectName"}

# action_44
set x0 [expr 57.0 + $offsetX] 
set y0 [expr 1257.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_44) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {setObjectName}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set objectName [lindex $results 3]}

# goodbye_45
set x0 [expr 147.0 + $offsetX] 
set y0 [expr 1317.0 + $offsetY] 
set obvar [newO goodbye $x0 $y0 {no 0}]
set r(goodbye_45) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt) {Goodbye.}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {goodbye}
set ob(dtmf,interrupt) {0}

# action_46
set x0 [expr 267.0 + $offsetX] 
set y0 [expr 1317.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_46) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {take}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {MIL_Take $objectName}

# action_47
set x0 [expr 267.0 + $offsetX] 
set y0 [expr 1257.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_47) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {setObjectName_0}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set objectName [lindex $results 2]}

# action_48
set x0 [expr 417.0 + $offsetX] 
set y0 [expr 1257.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_48) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {setObjectName_1}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set objectName [lindex $results 2]}

# action_49
set x0 [expr 417.0 + $offsetX] 
set y0 [expr 1347.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_49) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {touch}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {MIL_Touch $objectName}

# action_50
set x0 [expr 537.0 + $offsetX] 
set y0 [expr 1257.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_50) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {setObjectName_2}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set objectName [lindex $results 2]}

# action_51
set x0 [expr 537.0 + $offsetX] 
set y0 [expr 1347.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_51) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {push}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {MIL_Push $objectName}

# queryone_52
set x0 [expr 687.0 + $offsetX] 
set y0 [expr 1257.0 + $offsetY] 
set obvar [newO queryone $x0 $y0 {no 2}]
set r(queryone_52) $obvar
upvar #0 $obvar ob
set ob(gif_original) {C:/Program Files/CSLU/Toolkit/2.0/apps/rad/base/gif/generic.gif}
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(changetrigger) {5}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(gif_tmmods) {C:/Program Files/CSLU/Toolkit/2.0/apps/rad/packages/Tucker-Maxon/gif_alt/generic.gif}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(prompt,markupText) {<SABLE></SABLE>
}
set ob(action1) {set objectName [lindex $results 8]
set armSide [lindex $results 11]
Say "Do you mean show me how to reach the $objectName with my $armSide arm?"}
set ob(recogportType,0) {Words}
set ob(recogportType,1) {Words}
set ob(override:repair) {0}
set ob(override:tts) {0}
set ob(repairStatus) {default}
set ob(changerate) {5}
set ob(dynamicWords) {{yes_I_do {j E s [.pau] aI [.pau] dc d I dc d}} {no_I_do_not {n oU [.pau] aI [.pau] dc d I dc d [.pau] n A tc th}}}
set ob(dyn:recog) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(portType,0) {Undefined}
set ob(portType,1) {Undefined}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {state3}
set ob(dtmf,interrupt) {0}
set ob(words) {{{{yes I do}} {} {{{j E s [.pau] aI [.pau] dc d I dc d}}}} {{{no I do not}} {} {{{n oU [.pau] aI [.pau] dc d I dc d [.pau] n A tc th}}}}}
set ob(grammar) {{{} {}} {{} {}}}
set ob(recognizer) {name adult_english_16khz_0.ob}

# prect_53
set x0 [expr 657.0 + $offsetX] 
set y0 [expr 1407.0 + $offsetY] 
set obvar [newO prect $x0 $y0 {no 2}]
set r(prect_53) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {isObjectVisible}
set ob(dtmf,interrupt) {0}
set ob(words) {{{{$error == "ack"}} {} {}} {{{$error == "nack"}} {} {}}}
set ob(grammar) {{} {}}

# queryone_54
set x0 [expr 747.0 + $offsetX] 
set y0 [expr 1497.0 + $offsetY] 
set obvar [newO queryone $x0 $y0 {no 2}]
set r(queryone_54) $obvar
upvar #0 $obvar ob
set ob(gif_original) {C:/Program Files/CSLU/Toolkit/2.0/apps/rad/base/gif/generic.gif}
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(changetrigger) {5}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(gif_tmmods) {C:/Program Files/CSLU/Toolkit/2.0/apps/rad/packages/Tucker-Maxon/gif_alt/generic.gif}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(prompt,markupText) {<SABLE></SABLE>
}
set ob(action1) {#Say "Sorry but i don't see the $objectName"
#Say "Should i try again?"}
set ob(recogportType,0) {Words}
set ob(recogportType,1) {Words}
set ob(override:repair) {0}
set ob(override:tts) {0}
set ob(repairStatus) {default}
set ob(changerate) {5}
set ob(dynamicWords) {{Yes_you_should {j E s [.pau] j u [.pau] S U dc d}} {No_you_should_not {n oU [.pau] j u [.pau] S U dc d [.pau] n A tc th}}}
set ob(dyn:recog) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(portType,0) {Undefined}
set ob(portType,1) {Undefined}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {try_again}
set ob(dtmf,interrupt) {0}
set ob(words) {{{{Yes you should}} {} {{{j E s [.pau] j u [.pau] S U dc d}}}} {{{No you should not}} {} {{{n oU [.pau] j u [.pau] S U dc d [.pau] n A tc th}}}}}
set ob(grammar) {{{} {}} {{} {}}}
set ob(recognizer) {name adult_english_16khz_0.ob}

# openmic_55
set x0 [expr 627.0 + $offsetX] 
set y0 [expr 1497.0 + $offsetY] 
set obvar [newO openmic $x0 $y0 {no 1}]
set r(openmic_55) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {1}
set ob(beep) {0}
set ob(dtmf,mode) {off}
set ob(garbageThreshold) {0}
set ob(prompt,type) {tts}
set ob(review) {0}
set ob(override:sdet) {1}
set ob(override:vumeter) {0}
set ob(prompt,markupText) {<SABLE></SABLE>
}
set ob(rejection) {8}
set ob(repairID) {<none>}
set ob(pronun) {.pau f I n I S .pau}
set ob(override:repair) {0}
set ob(override:tts) {0}
set ob(prompt,ttsText) {Tell me finished when my posture is good}
set ob(repairStatus) {default}
set ob(lsilence) {60000}
set ob(prompt) {Tell me finished when my posture is good}
set ob(dynamicWords) {{finish {.pau f I n I S .pau}}}
set ob(backoff) {500}
set ob(run) {run:openmic}
set ob(tsilence) {400}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(word) {finish}
set ob(override:caption) {0}
set ob(name) {finished}
set ob(wordspot) {30}
set ob(maxrec) {2}
set ob(dtmf,interrupt) {0}
set ob(words) {{finish {} {{{.pau f I n I S .pau}}}}}
set ob(grammar) {{}}
set ob(recognizer) {name adult_english_8khz_2.ob}
set ob(garbage) {8 30}

# action_56
set x0 [expr 657.0 + $offsetX] 
set y0 [expr 1347.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_56) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {enter_teaching_mode}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set error [MIL_Calib_Kin_Start  $armSide $objectName ]
puts "got reply $error"}

# action_57
set x0 [expr 627.0 + $offsetX] 
set y0 [expr 1587.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_57) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {stop_teaching_mode}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {MIL_Calib_Kin_Stop}

# action_58
set x0 [expr 807.0 + $offsetX] 
set y0 [expr 1227.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_58) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {forget}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {puts "Now forgeting $objectName"
MIL_Forget_Obj  $objectName
KARMA_Forget $objectName}

# action_59
set x0 [expr 807.0 + $offsetX] 
set y0 [expr 1167.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_59) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {setObjectName_3}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set objectName [lindex $results 1]}

# action_60
set x0 [expr 200.0 + $offsetX] 
set y0 [expr 1347.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_60) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {showMe}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {#set text "show me the object"
#Speak $text

MIL_track_start}

# action_61
set x0 [expr 237.0 + $offsetX] 
set y0 [expr 1377.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_61) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {thereUgo}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set proceed -1

while { $proceed == -1 } {

	set g "There you go | Skip it"
	set proceed [SM_Reco_Grammar $g]
}

set outcome [lindex $proceed 0]}

# prect_62
set x0 [expr 237.0 + $offsetX] 
set y0 [expr 1467.0 + $offsetY] 
set obvar [newO prect $x0 $y0 {no 2}]
set r(prect_62) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {state6}
set ob(dtmf,interrupt) {0}
set ob(words) {{{{$outcome=="There"}} {} {}} {{{$outcome=="Skip"}} {} {}}}
set ob(grammar) {{} {}}

# action_63
set x0 [expr 297.0 + $offsetX] 
set y0 [expr 1587.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_63) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {nothing}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {MIL_track_stop}

# subnet_64
set x0 [expr 1040.0 + $offsetX] 
set y0 [expr 1220.0 + $offsetY] 
set obvar [newO subnet $x0 $y0 {no 1}]
set r(subnet_64) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {SharedPlan}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}

# action_65
set x0 [expr 357.0 + $offsetX] 
set y0 [expr 1287.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_65) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {what}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set whatIs [MIL_What_Is]}

# prect_66
set x0 [expr 327.0 + $offsetX] 
set y0 [expr 1377.0 + $offsetY] 
set obvar [newO prect $x0 $y0 {no 3}]
set r(prect_66) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(prompt,markupText) {<SABLE></SABLE>
}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {isObjectFound_0}
set ob(dtmf,interrupt) {0}
set ob(words) {{{{$whatIs == "ack"}} {} {}} {{{$whatIs == "nack"}} {} {}} {1 {} {}}}
set ob(grammar) {{} {} {}}

# action_67
set x0 [expr 297.0 + $offsetX] 
set y0 [expr 1437.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_67) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {isItGood_0}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set results -1

while { $results == -1 } {

	#Say "beep"
	set g "Yes you are | No you are not | Skip it | Wrong this is a #Object"
	set results [SM_Reco_Grammar $g]
}

set reward [lindex $results 0]

if { $reward == "Yes" } {
	MIL_Reward "ack"
} 
if { $reward == "No" } {
	MIL_Reward "nack"
} 
if { $reward == "Skip" } {
	MIL_Reward "skip"
}
if { $reward == "Wrong" } {
	set objectName [lindex $results 4]
	MIL_populate_name $objectName
}}

# action_68
set x0 [expr 387.0 + $offsetX] 
set y0 [expr 1497.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_68) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {noGood}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set results -1

while { $results == -1 } {

	#Say "I did not find the $objectName is it so?"
	set g "This is a #Object | Skip it"
	set results [SM_Reco_Grammar $g]
}

set reward [lindex $results 0]

if { $reward == "Skip" } {
	MIL_Reward "skip"
} else {
	set objectName [lindex $results 3]
	MIL_populate_name $objectName
}}

# action_69
set x0 [expr 417.0 + $offsetX] 
set y0 [expr 1437.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_69) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {bug_0}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {Say "AI AI AI! I cannot parse the reply!"}

# action_70
set x0 [expr -153.0 + $offsetX] 
set y0 [expr 597.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_70) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {module_memory}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {Port objectPort
objectPort open "/RAD/objects:i"

if {$usingRobot == 1} {
	#ConnectionChecker_Add "/RAD/objects:i" "/iolRADHelper/rpc"
}

proc sendIDs { VOCABULORY  } {
	bottle clear
	bottle addString "name"
	for { set i 0 } { $i < [llength $VOCABULORY] } { incr i 1 } {
		bottle addString [lindex $VOCABULORY $i]
	}
	objectPort write bottle reply
	puts "Got reply size of [reply size]  "
	#set VOCABULORY "w0 w1 w2 w3 w4 w5 w6 w7 w8 w9 w10 w11 w12 w13 w14 w15 w16 w17 w18 w19 w20 w21"
	
	if { [ [reply get 0] toString] == "ack" } {
		
		puts "got ACK from helper, setting new vocabulary..."
		set VOCABULORY "[ [reply get 1] toString] [ [reply get 2] toString] [ [reply get 3] toString] [ [reply get 4] toString] [ [reply get 5] toString] [ [reply get 6] toString] [ [reply get 7] toString] [ [reply get 8] toString] [ [reply get 9] toString] [ [reply get 10] toString] [ [reply get 11] toString] [ [reply get 12] toString] [ [reply get 13] toString] [ [reply get 14] toString] [ [reply get 15] toString] [ [reply get 16] toString] [ [reply get 17] toString] [ [reply get 18] toString] [ [reply get 19] toString] [ [reply get 20] toString] [ [reply get 21] toString] "
	} else {
		puts "Got NACK from helper NOT setting new vocabulary..."
	}
	
	return $VOCABULORY
}}

# action_71
set x0 [expr -123.0 + $offsetX] 
set y0 [expr 777.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_71) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {test}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set VOCABULORY "{purple-car} octopus lego {pink-ball} box toy left middle right "


set WHATEVER [sendIDs $VOCABULORY]
puts " "
puts " "
for { set i 0 } { $i < [llength $WHATEVER] } { incr i 1 } {
	puts "the objects [lindex $WHATEVER $i]"
}

set VOCABULORY $WHATEVER
for { set i 0 } { $i < [llength $VOCABULORY] } { incr i 1 } {
	puts "the VOCABULARY objects [lindex $VOCABULORY $i]"
}







proc getIDs { VOCABULORY w1 w2 w3 w4 w5 w6 w7 w8 w9 w10 w11 w12 w13 w14 w15 w16} {
	
	upvar $w1 tmpW1
	upvar $w2 tmpW2
	upvar $w3 tmpW3
	upvar $w4 tmpW4
	upvar $w5 tmpW5
	upvar $w6 tmpW6
	upvar $w7 tmpW7
	upvar $w8 tmpW8
	upvar $w9 tmpW9
	upvar $w10 tmpW10
	upvar $w11 tmpW11
	upvar $w12 tmpW12
	upvar $w13 tmpW13
	upvar $w14 tmpW14
	upvar $w15 tmpW15
	upvar $w16 tmpW16

	bottle clear
	bottle addString "name"
	for { set i 0 } { $i < [llength $VOCABULORY] } { incr i 1 } {
		bottle addString [lindex $VOCABULORY $i]
	}
	objectPort write bottle reply
	puts "asked IDs"

	set tmpW1 [ [reply get 0] toString]
	set tmpW2 [ [reply get 1] toString]
	set tmpW3 [ [reply get 2] toString]
	set tmpW4 [ [reply get 3] toString]
	set tmpW5 [ [reply get 4] toString]
	set tmpW6 [ [reply get 5] toString]
	set tmpW7 [ [reply get 6] toString]
	set tmpW8 [ [reply get 7] toString]
	set tmpW9 [ [reply get 8] toString]
	set tmpW10 [ [reply get 9] toString]
	set tmpW11 [ [reply get 10] toString]
	set tmpW12 [ [reply get 11] toString]
	set tmpW13 [ [reply get 12] toString]
	set tmpW14 [ [reply get 13] toString]
	set tmpW15 [ [reply get 14] toString]
	set tmpW16 [ [reply get 14] toString]



	puts "[ [reply get 0]  toString]"
	puts "[ [reply get 1]  toString]"
	puts "[ [reply get 2]  toString]"
	puts "[ [reply get 3]  toString]"
	puts "[ [reply get 4]  toString]"
	puts "[ [reply get 5]  toString]"
	puts "[ [reply get 6]  toString]"
	puts "[ [reply get 7]  toString]"
	puts "[ [reply get 8]  toString]"
	puts "[ [reply get 9]  toString]"
	puts "[ [reply get 10]  toString]"
	puts "[ [reply get 11]  toString]"
	puts "[ [reply get 12]  toString]"
	puts "[ [reply get 13]  toString]"
	puts "[ [reply get 14]  toString]"
	puts "[ [reply get 15]  toString]"
	puts "[ [reply get 16]  toString]"

}}

# action_72
set x0 [expr 117.0 + $offsetX] 
set y0 [expr 897.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_72) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {initialise_Vocabulories_new}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {#Vocabulory for objects

puts " "
puts " "

puts "Initialising vocabulory..."
set VOCABULORY "{purple-car} octopus lego {pink-ball} box toy left middle right"
set newVocab [sendIDs $VOCABULORY]

puts "the known objects are: "

#for { set i 0 } { $i < [llength $newVocab] } { incr i 1 } {
#	puts "Object [lindex $newVocab $i]"
#}
set VOCABULORY $newVocab

for { set i 0 } { $i < [llength $VOCABULORY] } { incr i 1 } {
	puts "Expanding vocabulory Object with \"[lindex $VOCABULORY $i]\""
	SM_RGM_Expand "#Object" [lindex $VOCABULORY $i]
}


#Vocabulory for Actions
#puts "Initialising vocabulory..."

set VOCABULORY "{point at} {what is this}"

for { set i 0 } { $i < [llength $VOCABULORY] } { incr i 1 } {
	#puts "Expanding vocabulory Object with \"[lindex $VOCABULORY $i]\""
	SM_RGM_Expand "#Action" [lindex $VOCABULORY $i]
}

puts "Adding \"icub stop\" to the async grammar"
SM_Expand_asyncrecog "icub-stop-now"
puts "Finished setting up Vocabulary"
puts " "
puts " "}

# action_73
set x0 [expr 477.0 + $offsetX] 
set y0 [expr 897.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_73) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {karma}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set objectName [lindex $results 2]
MIL_reset
Speak "let me see what this can do"

KarmaManager_train $objectName
Speak "nice"}

# action_74
set x0 [expr 597.0 + $offsetX] 
set y0 [expr 927.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_74) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {evaluate}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set objectName [lindex $results 2]
MIL_reset
Speak "Testing, let me see what this can do"

KarmaManager_eval $objectName
Speak "ok"}

# action_75
set x0 [expr -452.0 + $offsetX] 
set y0 [expr 687.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_75) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {startInteraction}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set succeed [checkState ]}

# prect_76
set x0 [expr -422.0 + $offsetX] 
set y0 [expr 777.0 + $offsetY] 
set obvar [newO prect $x0 $y0 {no 3}]
set r(prect_76) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {checker}
set ob(dtmf,interrupt) {0}
set ob(words) {{{{$succeed == "active" }} {} {}} {{{$succeed == "continue" }} {} {}} {{} {} {}}}
set ob(grammar) {{} {} {}}

# openmic_77
set x0 [expr -340.0 + $offsetX] 
set y0 [expr 687.0 + $offsetY] 
set obvar [newO openmic $x0 $y0 {no 1}]
set r(openmic_77) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {1}
set ob(beep) {0}
set ob(dtmf,mode) {off}
set ob(garbageThreshold) {0}
set ob(prompt,type) {tts}
set ob(review) {0}
set ob(override:sdet) {1}
set ob(override:vumeter) {0}
set ob(prompt,markupText) {<SABLE></SABLE>
}
set ob(rejection) {8}
set ob(repairID) {<none>}
set ob(pronun) {.pau bc b A l dc d i: .pau}
set ob(override:repair) {0}
set ob(override:tts) {0}
set ob(repairStatus) {default}
set ob(lsilence) {60000}
set ob(dynamicWords) {{baldi {.pau bc b A l dc d i: .pau}}}
set ob(backoff) {500}
set ob(run) {run:openmic}
set ob(tsilence) {400}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(word) {baldi}
set ob(override:caption) {0}
set ob(name) {exit}
set ob(wordspot) {30}
set ob(maxrec) {2}
set ob(dtmf,interrupt) {0}
set ob(words) {{baldi {} {{{.pau bc b A l dc d i: .pau}}}}}
set ob(grammar) {{}}
set ob(recognizer) {name adult_english_8khz_2.ob}
set ob(garbage) {8 30}

# action_78
set x0 [expr -430.0 + $offsetX] 
set y0 [expr 867.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_78) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {state9}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}

# action_79
set x0 [expr -340.0 + $offsetX] 
set y0 [expr 777.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_79) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {setExit}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set succeed [function]}

# action_80
set x0 [expr -153.0 + $offsetX] 
set y0 [expr 680.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_80) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {module_attention}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {Port attPort
Port eventPort
eventPort open "/RAD/event:i"
attPort open "/RAD/attention:o"

if {$usingRobot == 1} {
ConnectionChecker_Add "/RAD/attention:o" "/eventManager/human:rpc"
ConnectionChecker_Add "/eventSelectiveAttention/maxCalib:o" "/RAD/event:i"

}
proc eventPoints { x y } {
	upvar $x tmpX
	upvar $y tmpY
	bottle clear
	puts "will now check"
	eventPort read bottle true
	set tmpX [ [bottle get 0] asInt]
	set tmpY [ [bottle get 1] asInt]
}

proc attCmd { x y } {
	#upvar $x tmpX
	#upvar $y tmpY
	#bottle clear
	#reply clear
	#bottle addString "look"
	#eventPort write bottle reply
	
	#puts "got loc: from ikart"
	#puts "[ [bottle get 0] asInt]"
	#puts "[ [bottle get 1] asInt]"

	#set tmpX [ [bottle get 0] asInt]
	#set tmpY [ [bottle get 1] asInt]
}


proc attPoint { x y } {
	
	Bottle  toSend
	toSend clear
	toSend addString "pdvs"
	toSend addInt $x
	toSend addInt $y
	puts "will now send"
	attPort write toSend reply
	puts [reply toString]
	return  [ [reply get 0] toString]
	
}

proc attLearn { x y } {
	bottle clear
	bottle addString "ldvs"
	bottle addInt $x
	bottle addInt $y
	attPort write bottle reply
	puts "ok sent command to tap"
	puts [reply toString]
	return  [ [reply get 0] toString]
	
}


proc AttHome { } {

	bottle clear
	bottle addString "home"
	attPort write bottle reply
	puts [reply toString]

}

proc explTrack { } {
	bottle clear
	bottle addString "sml"
	attPort write bottle reply
	puts "the reply is"
	puts [reply toString]
	return  [ [reply get 0] toString]
	
}

proc explEvent { } {
	bottle clear
	bottle addString "ktl"
	attPort write bottle reply
	puts "the reply is"
	puts [reply toString]
	return  [ [reply get 0] toString]
	
}}

# action_81
set x0 [expr -190.0 + $offsetX] 
set y0 [expr 1100.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_81) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {att-getPos}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set x "null"
set y "null"
puts "asking for pos"
eventPoints x y

puts "GOT POSITION OF POINT $x $y "}

# action_82
set x0 [expr -190.0 + $offsetX] 
set y0 [expr 1167.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_82) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {att-point}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {puts "THE POSITION OF POINT IS $x $y "
set pointResult [attPoint $x $y]}

# prect_83
set x0 [expr -190.0 + $offsetX] 
set y0 [expr 1227.0 + $offsetY] 
set obvar [newO prect $x0 $y0 {no 3}]
set r(prect_83) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(prompt,markupText) {<SABLE></SABLE>
}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {isPointing}
set ob(dtmf,interrupt) {0}
set ob(words) {{{{$pointResult == "ack"}} {} {}} {{{$pointResult == "nack"}} {} {}} {1 {} {}}}
set ob(grammar) {{} {} {}}

# action_84
set x0 [expr -190.0 + $offsetX] 
set y0 [expr 1310.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_84) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {speak}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set text "something is wrong"
Speak $text}

# action_85
set x0 [expr -250.0 + $offsetX] 
set y0 [expr 1310.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_85) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {ask}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set text "is this an object?"
Speak $text

set results -1
while { $results == -1 } {

	set g "Yes it is | No it is not | Quit"
	set results [SM_Reco_Grammar $g]
}
set reward [lindex $results 0]}

# prect_86
set x0 [expr -250.0 + $offsetX] 
set y0 [expr 1377.0 + $offsetY] 
set obvar [newO prect $x0 $y0 {no 3}]
set r(prect_86) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(prompt,markupText) {<SABLE></SABLE>
}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {isObject}
set ob(dtmf,interrupt) {0}
set ob(words) {{{{$reward == "Yes"}} {} {}} {{{$reward == "No"}} {} {}} {{{$reward == "Quit"}} {} {}}}
set ob(grammar) {{} {} {}}

# action_87
set x0 [expr -302.0 + $offsetX] 
set y0 [expr 1437.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_87) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {learn}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {puts "THE POSITION OF OBJECT IS $x $y "
AttHome

set active [attLearn  $x $y ]
puts "done acting $x $y "}

# action_88
set x0 [expr -123.0 + $offsetX] 
set y0 [expr 1250.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_88) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {error}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set text "cacca"
Speak $text}

# prect_89
set x0 [expr -272.0 + $offsetX] 
set y0 [expr 1520.0 + $offsetY] 
set obvar [newO prect $x0 $y0 {no 2}]
set r(prect_89) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(prompt,markupText) {<SABLE></SABLE>
}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {isActing}
set ob(dtmf,interrupt) {0}
set ob(words) {{{{$active == "ack"}} {} {}} {{{$active == "nack"}} {} {}}}
set ob(grammar) {{} {}}

# action_90
set x0 [expr -310.0 + $offsetX] 
set y0 [expr 1587.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_90) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {hap}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set text "nice!"
Speak $text

AttHome}

# action_91
set x0 [expr -272.0 + $offsetX] 
set y0 [expr 1587.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_91) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {sad}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set text "error"
Speak $text

AttHome}

# action_92
set x0 [expr -250.0 + $offsetX] 
set y0 [expr 1437.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_92) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {return}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {AttHome}

# action_93
set x0 [expr -190.0 + $offsetX] 
set y0 [expr 1437.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_93) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {startOver}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {AttHome}

# prect_94
set x0 [expr 770.0 + $offsetX] 
set y0 [expr 890.0 + $offsetY] 
set obvar [newO prect $x0 $y0 {no 2}]
set r(prect_94) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {explore}
set ob(dtmf,interrupt) {0}
set ob(words) {{{{ [lindex $results 1] == "track"}} {} {}} {{{ [lindex $results 1] == "events"}} {} {}}}
set ob(grammar) {{} {}}

# action_95
set x0 [expr 740.0 + $offsetX] 
set y0 [expr 950.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_95) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {track}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set text "will now tap and track"
Speak $text

set explResults [explTrack]}

# action_96
set x0 [expr 860.0 + $offsetX] 
set y0 [expr 950.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_96) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {event}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set text "will now tap and look at events"
Speak $text

set explResults [explEvent]}

# prect_97
set x0 [expr 740.0 + $offsetX] 
set y0 [expr 1017.0 + $offsetY] 
set obvar [newO prect $x0 $y0 {no 2}]
set r(prect_97) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(prompt,markupText) {<SABLE></SABLE>
}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {resultTrack}
set ob(dtmf,interrupt) {0}
set ob(words) {{{{$explResults == "ack"}} {} {}} {{{$explResults == "nack"}} {} {}}}
set ob(grammar) {{} {}}

# prect_98
set x0 [expr 860.0 + $offsetX] 
set y0 [expr 1017.0 + $offsetY] 
set obvar [newO prect $x0 $y0 {no 2}]
set r(prect_98) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(prompt,markupText) {<SABLE></SABLE>
}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {resultEvent}
set ob(dtmf,interrupt) {0}
set ob(words) {{{{$explResults == "ack"}} {} {}} {{{$explResults == "nack"}} {} {}}}
set ob(grammar) {{} {}}

# action_99
set x0 [expr 687.0 + $offsetX] 
set y0 [expr 1077.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_99) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {homeTrack}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set text "nice!"
Speak $text

AttHome}

# action_100
set x0 [expr 770.0 + $offsetX] 
set y0 [expr 1077.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_100) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {errorTrack}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set text "sorry i am not able to do it"
Speak $text

AttHome}

# action_101
set x0 [expr 890.0 + $offsetX] 
set y0 [expr 1100.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_101) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {homeTrack_0}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set text "events registered"
Speak $text

AttHome}

# action_102
set x0 [expr 957.0 + $offsetX] 
set y0 [expr 1100.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_102) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {errorTrack_0}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set text "sorry i am not able to do it"
Speak $text

AttHome}

####### CONNECTIONS
connect r prect_94 action_95 0 775.0 948.0 763.0 940.0 752.0 939.0 $offsetX $offsetY
connect r prect_89 action_91 1 -253.0 1578.0 -256.0 1573.0 -260.0 1576.0 $offsetX $offsetY
connect r prect_76 action_75 1 -380.0 835.0 -380.0 676.0 -440.0 676.0 $offsetX $offsetY
connect r prect_66 action_69 2 354.0 1435.0 392.0 1427.0 429.0 1426.0 $offsetX $offsetY
connect r action_36 action_32 0 39.0 1555.0 114.0 1307.0 189.0 1066.0 $offsetX $offsetY
connect r action_96 prect_98 0 872.0 1008.0 872.0 1003.0 872.0 1006.0 $offsetX $offsetY
connect r prect_86 action_93 2 -223.0 1435.0 -201.0 1427.0 -178.0 1426.0 $offsetX $offsetY
connect r action_57 action_32 0 609.0 1645.0 429.0 1352.0 249.0 1066.0 $offsetX $offsetY
connect r action_28 action_70 0 99.0 685.0 -6.0 632.0 -111.0 586.0 $offsetX $offsetY
connect r action_40 subnet_29 0 129.0 475.0 129.0 482.0 129.0 496.0 $offsetX $offsetY
connect r input_23 action_40 0 129.0 415.0 129.0 407.0 129.0 406.0 $offsetX $offsetY
connect r prect_33 action_60 3 152.0 1195.0 182.0 1262.0 212.0 1336.0 $offsetX $offsetY
connect r prect_86 action_87 0 -253.0 1435.0 -272.0 1427.0 -290.0 1426.0 $offsetX $offsetY
connect r action_74 action_32 0 609.0 985.0 414.0 1022.0 219.0 1066.0 $offsetX $offsetY
connect r queryone_27 action_24 0 264.0 865.0 212.0 767.0 159.0 676.0 $offsetX $offsetY
connect r prect_25 action_26 0 122.0 805.0 125.0 812.0 129.0 826.0 $offsetX $offsetY
connect r prect_98 action_102 1 880.0 1075.0 924.0 1078.0 969.0 1089.0 $offsetX $offsetY
connect r action_93 action_32 0 -148.0 1495.0 21.0 1277.0 189.0 1066.0 $offsetX $offsetY
connect r openmic_55 action_57 0 639.0 1555.0 639.0 1562.0 639.0 1576.0 $offsetX $offsetY
connect r action_67 action_32 0 279.0 1495.0 264.0 1277.0 249.0 1066.0 $offsetX $offsetY
connect r action_59 action_58 0 819.0 1225.0 819.0 1217.0 819.0 1216.0 $offsetX $offsetY
connect r prect_25 queryone_27 1 137.0 805.0 223.0 797.0 309.0 796.0 $offsetX $offsetY
connect r prect_33 queryone_52 8 227.0 1195.0 463.0 1217.0 699.0 1246.0 $offsetX $offsetY
connect r prect_33 action_65 11 272.0 1195.0 320.0 1232.0 369.0 1276.0 $offsetX $offsetY
connect r action_60 action_61 0 182.0 1405.0 182.0 1366.0 249.0 1366.0 $offsetX $offsetY
connect r prect_97 action_100 1 760.0 1075.0 771.0 1067.0 782.0 1066.0 $offsetX $offsetY
connect r prect_37 action_41 1 69.0 1465.0 69.0 1472.0 69.0 1486.0 $offsetX $offsetY
connect r prect_94 action_96 1 790.0 948.0 831.0 940.0 872.0 939.0 $offsetX $offsetY
connect r action_92 action_81 0 -208.0 1495.0 -208.0 1288.0 -208.0 1089.0 $offsetX $offsetY
connect r action_81 action_82 0 -178.0 1158.0 -178.0 1153.0 -178.0 1156.0 $offsetX $offsetY
connect r action_82 prect_83 0 -178.0 1225.0 -178.0 1217.0 -178.0 1216.0 $offsetX $offsetY
connect r action_69 action_32 0 399.0 1495.0 324.0 1277.0 249.0 1066.0 $offsetX $offsetY
connect r prect_66 action_67 0 324.0 1435.0 317.0 1427.0 309.0 1426.0 $offsetX $offsetY
connect r action_44 action_35 0 69.0 1315.0 69.0 1307.0 69.0 1306.0 $offsetX $offsetY
connect r action_47 action_46 0 279.0 1315.0 279.0 1307.0 279.0 1306.0 $offsetX $offsetY
connect r queryone_27 action_26 1 279.0 865.0 219.0 842.0 159.0 826.0 $offsetX $offsetY
connect r subnet_29 action_30 0 129.0 565.0 129.0 557.0 129.0 556.0 $offsetX $offsetY
connect r prect_33 prect_94 15 362.0 1195.0 557.0 1033.0 752.0 879.0 $offsetX $offsetY
connect r prect_86 action_92 1 -238.0 1435.0 -238.0 1427.0 -238.0 1426.0 $offsetX $offsetY
connect r action_32 prect_33 0 219.0 1135.0 219.0 1127.0 219.0 1126.0 $offsetX $offsetY
connect r prect_37 action_38 2 84.0 1465.0 107.0 1457.0 129.0 1456.0 $offsetX $offsetY
connect r action_49 action_32 0 399.0 1405.0 324.0 1232.0 249.0 1066.0 $offsetX $offsetY
connect r subnet_64 action_32 0 1022.0 1278.0 636.0 1168.0 249.0 1066.0 $offsetX $offsetY
connect r prect_53 openmic_55 0 662.0 1465.0 650.0 1472.0 639.0 1486.0 $offsetX $offsetY
connect r action_99 action_32 0 669.0 1135.0 459.0 1097.0 249.0 1066.0 $offsetX $offsetY
connect r action_91 action_32 0 -230.0 1645.0 -20.0 1352.0 189.0 1066.0 $offsetX $offsetY
connect r action_90 action_32 0 -268.0 1645.0 -39.0 1352.0 189.0 1066.0 $offsetX $offsetY
connect r action_58 action_32 0 789.0 1285.0 519.0 1172.0 249.0 1066.0 $offsetX $offsetY
connect r action_26 action_72 0 129.0 895.0 129.0 887.0 129.0 886.0 $offsetX $offsetY
connect r prect_83 action_84 1 -178.0 1285.0 -178.0 1288.0 -178.0 1299.0 $offsetX $offsetY
connect r action_88 action_32 0 -81.0 1308.0 54.0 1183.0 189.0 1066.0 $offsetX $offsetY
connect r action_34 action_32 0 39.0 1255.0 114.0 1157.0 189.0 1066.0 $offsetX $offsetY
connect r action_41 action_32 0 99.0 1555.0 144.0 1307.0 189.0 1066.0 $offsetX $offsetY
connect r action_48 action_49 0 429.0 1315.0 429.0 1322.0 429.0 1336.0 $offsetX $offsetY
connect r prect_33 action_74 13 332.0 1195.0 455.0 1052.0 579.0 916.0 $offsetX $offsetY
connect r action_39 goodbye_45 0 159.0 1315.0 159.0 1307.0 159.0 1306.0 $offsetX $offsetY
connect r action_46 action_32 0 249.0 1375.0 249.0 1217.0 249.0 1066.0 $offsetX $offsetY
connect r action_50 action_51 0 549.0 1315.0 549.0 1322.0 549.0 1336.0 $offsetX $offsetY
connect r prect_33 action_39 2 137.0 1195.0 148.0 1217.0 159.0 1246.0 $offsetX $offsetY
connect r prect_37 action_36 0 54.0 1465.0 32.0 1472.0 9.0 1486.0 $offsetX $offsetY
connect r action_61 prect_62 0 249.0 1435.0 249.0 1442.0 249.0 1456.0 $offsetX $offsetY
connect r prect_33 action_50 7 212.0 1195.0 380.0 1217.0 549.0 1246.0 $offsetX $offsetY
connect r prect_83 action_85 0 -193.0 1285.0 -216.0 1288.0 -238.0 1299.0 $offsetX $offsetY
connect r prect_33 action_47 4 167.0 1195.0 223.0 1217.0 279.0 1246.0 $offsetX $offsetY
connect r action_95 prect_97 0 752.0 1008.0 752.0 1003.0 752.0 1006.0 $offsetX $offsetY
connect r action_72 action_42 0 129.0 955.0 129.0 962.0 129.0 976.0 $offsetX $offsetY
connect r action_38 action_32 0 159.0 1525.0 174.0 1292.0 189.0 1066.0 $offsetX $offsetY
connect r action_84 action_32 0 -148.0 1368.0 21.0 1213.0 189.0 1066.0 $offsetX $offsetY
connect r prect_33 action_81 14 287.0 1195.0 69.0 1138.0 -148.0 1089.0 $offsetX $offsetY
connect r prect_33 action_34 0 107.0 1195.0 58.0 1187.0 9.0 1186.0 $offsetX $offsetY
connect r prect_89 action_90 0 -268.0 1578.0 -283.0 1573.0 -298.0 1576.0 $offsetX $offsetY
connect r action_63 action_42 0 279.0 1645.0 219.0 1307.0 159.0 976.0 $offsetX $offsetY
connect r prect_62 action_43 0 242.0 1525.0 230.0 1547.0 219.0 1576.0 $offsetX $offsetY
connect r action_51 action_32 0 519.0 1405.0 384.0 1232.0 249.0 1066.0 $offsetX $offsetY
connect r prect_76 action_78 0 -425.0 835.0 -422.0 842.0 -418.0 856.0 $offsetX $offsetY
connect r prect_33 action_44 1 122.0 1195.0 95.0 1217.0 69.0 1246.0 $offsetX $offsetY
connect r action_101 action_32 0 872.0 1158.0 561.0 1108.0 249.0 1066.0 $offsetX $offsetY
connect r queryone_54 action_56 0 722.0 1555.0 710.0 1442.0 699.0 1336.0 $offsetX $offsetY
connect r prect_33 action_48 6 197.0 1195.0 313.0 1217.0 429.0 1246.0 $offsetX $offsetY
connect r action_79 prect_76 0 -358.0 835.0 -369.0 797.0 -380.0 766.0 $offsetX $offsetY
connect r prect_62 action_63 1 257.0 1525.0 283.0 1547.0 309.0 1576.0 $offsetX $offsetY
connect r prect_33 action_59 9 272.0 1195.0 530.0 1172.0 789.0 1156.0 $offsetX $offsetY
connect r action_68 action_32 0 369.0 1555.0 309.0 1307.0 249.0 1066.0 $offsetX $offsetY
connect r queryone_54 action_32 1 737.0 1555.0 493.0 1307.0 249.0 1066.0 $offsetX $offsetY
connect r prect_33 action_42 5 152.0 1195.0 155.0 1082.0 159.0 976.0 $offsetX $offsetY
connect r action_42 action_32 0 129.0 1045.0 174.0 1052.0 219.0 1066.0 $offsetX $offsetY
connect r prect_53 queryone_54 1 677.0 1465.0 718.0 1472.0 759.0 1486.0 $offsetX $offsetY
connect r action_87 prect_89 0 -290.0 1495.0 -275.0 1498.0 -260.0 1509.0 $offsetX $offsetY
connect r queryone_52 action_56 0 692.0 1315.0 680.0 1322.0 669.0 1336.0 $offsetX $offsetY
connect r action_75 prect_76 0 -440.0 745.0 -425.0 752.0 -410.0 766.0 $offsetX $offsetY
connect r action_73 action_32 0 489.0 955.0 354.0 1007.0 219.0 1066.0 $offsetX $offsetY
connect r prect_98 action_101 0 865.0 1075.0 883.0 1078.0 902.0 1089.0 $offsetX $offsetY
connect r action_65 prect_66 0 369.0 1345.0 354.0 1352.0 339.0 1366.0 $offsetX $offsetY
connect r prect_33 action_73 12 317.0 1195.0 388.0 1037.0 459.0 886.0 $offsetX $offsetY
connect r action_43 action_32 0 189.0 1645.0 189.0 1066.0 219.0 1066.0 $offsetX $offsetY
connect r action_102 action_32 0 939.0 1158.0 594.0 1108.0 249.0 1066.0 $offsetX $offsetY
connect r prect_83 action_88 2 -133.0 1285.0 -137.0 1258.0 -141.0 1239.0 $offsetX $offsetY
connect r action_100 action_32 0 752.0 1135.0 501.0 1097.0 249.0 1066.0 $offsetX $offsetY
connect r action_30 action_28 0 129.0 625.0 129.0 617.0 129.0 616.0 $offsetX $offsetY
connect r action_24 prect_25 0 129.0 745.0 129.0 737.0 129.0 736.0 $offsetX $offsetY
connect r prect_33 subnet_64 10 257.0 1195.0 654.0 1198.0 1052.0 1209.0 $offsetX $offsetY
connect r prect_97 action_99 0 745.0 1075.0 722.0 1067.0 699.0 1066.0 $offsetX $offsetY
connect r action_85 prect_86 0 -238.0 1368.0 -238.0 1363.0 -238.0 1366.0 $offsetX $offsetY
connect r action_70 action_80 0 -141.0 655.0 -141.0 658.0 -141.0 669.0 $offsetX $offsetY
connect r action_56 prect_53 0 669.0 1405.0 669.0 1397.0 669.0 1396.0 $offsetX $offsetY
connect r action_35 prect_37 0 69.0 1375.0 69.0 1382.0 69.0 1396.0 $offsetX $offsetY
connect r prect_66 action_68 1 339.0 1435.0 369.0 1457.0 399.0 1486.0 $offsetX $offsetY
connect r queryone_52 action_32 1 677.0 1315.0 463.0 1187.0 249.0 1066.0 $offsetX $offsetY
connect r action_80 action_24 0 -111.0 738.0 -6.0 703.0 99.0 676.0 $offsetX $offsetY
connect r openmic_77 action_79 0 -328.0 745.0 -328.0 752.0 -328.0 766.0 $offsetX $offsetY

##### SUBDIALOGUE
set offsetX 0
set offsetY 0
set id [registerScreen "Initialisation_Procedures"]
lappend newScreens subnet_29 $id
recordActiveScreen $id

# enter_213
set x0 [expr -7 + $offsetX] 
set y0 [expr 7 + $offsetY] 
set obvar [newO enter $x0 $y0 {no 1}]
set r(enter_213) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {enter}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}

# action_214
set x0 [expr -7 + $offsetX] 
set y0 [expr 150 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_214) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {Yarp_Initialisation}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {load [file join [pwd] libtclyarp.dll] yarp
Network_init
Bottle bottle
Bottle reply

global ConnectionToCheck
set ConnectionToCheck { }

proc ConnectionChecker_Add { p1 p2 } {
set c $p1
set c [lappend c $p2]
   global ConnectionToCheck
   set ConnectionToCheck [lappend ConnectionToCheck $c]
}

proc ConnectionChecker_Check { } {
   global ConnectionToCheck
   set result 1
   foreach c $ConnectionToCheck {
     set p1 [lindex $c 1]
     set p2 [lindex $c 2]
     puts "Checking connection : $p1 $p2"
     if { [NetworkBase_isConnected $p1 $p2] == 0 } {
       puts "Not connected : $p1 $p2"
       set result 0
     }
   }
return $result
}

proc ConnectionChecker_Connect { } {
   global ConnectionToCheck
   set result 1
   foreach c $ConnectionToCheck {
     set p1 [lindex $c 0]
     set p2 [lindex $c 1]
     puts "Connecting : $p1 $p2"
     if { [NetworkBase_connect $p1 $p2] == 0 } {
       puts "Not connected : $p1 $p2"
       set result 0
     }
   }
return $result
}}

# action_215
set x0 [expr 0 + $offsetX] 
set y0 [expr 90 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_215) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {Helpers_procedures}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set using_robot 1

proc Say { what } {
tts $what
puts "Say : $what"
}

#return a number between $low and $high
proc Random { low high } {
	return [ expr rand() * [expr $high - $low ] +$low ]
}

#String replace is not available in TCL8.0 so here is a home made one
proc StringReplace {str srcStr destStr} {

set i 1
while { $i != -1 } {
	set i [string first $srcStr $str]
	if { $i != -1} {
#	puts "Found $srcStr at $i"
	set buff [string range $str 0 [expr $i -1]]

	set buff "$buff$destStr"

	set buff "$buff[string range $str [expr $i + [string length $srcStr]] [string length $str]]"

	set str $buff
	}
}
return $str
}}

# exit_216
set x0 [expr -15 + $offsetX] 
set y0 [expr 217 + $offsetY] 
set obvar [newO exit $x0 $y0 {no 0}]
set r(exit_216) $obvar
upvar #0 $obvar ob
set ob(bargein) {off}
set ob(override:recognizer) {0}
set ob(recogType) {Tree}
set ob(dtmf,interrupt) {0}
set ob(dtmf,mode) {off}
set ob(package) {Base}
set ob(override:tts) {0}
set ob(exitStatus) {continue}
set ob(override:caption) {0}
set ob(prompt,type) {tts}
set ob(name) {return:continue}
set ob(override:vumeter) {0}
set ob(override:sdet) {0}
set ob(prompt,recordFlag) {0}

####### CONNECTIONS
connect r action_215 action_214 0 12.0 148.0 9.0 140.0 5.0 139.0 $offsetX $offsetY
connect r action_214 exit_216 0 5.0 208.0 1.0 203.0 -3.0 206.0 $offsetX $offsetY
connect r enter_213 action_215 0 5.0 65.0 9.0 68.0 12.0 79.0 $offsetX $offsetY

##### SUBDIALOGUE
set offsetX 0
set offsetY 0
set id [registerScreen "SharedPlan"]
lappend newScreens subnet_64 $id
recordActiveScreen $id

# enter_220
set x0 [expr 0 + $offsetX] 
set y0 [expr 150 + $offsetY] 
set obvar [newO enter $x0 $y0 {no 1}]
set r(enter_220) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {enter}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}

# action_221
set x0 [expr -10 + $offsetX] 
set y0 [expr 220 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_221) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {variables}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set  Learning false
set execute_learned_action  -1
set coop_count 0
set using_robot  1
set Cooperating 0
set OROboolean "true"}

# action_222
set x0 [expr -10 + $offsetX] 
set y0 [expr 280 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_222) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {read_ActionDefns}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set file [open "ActionDefinitionsSimple.txt" r]
set i 0


# gets with two arguments returns the length of the line,
# -1 if the end of the file is found
#
while { [gets $file line] >= 0 } {
  set action_name($i) [lindex $line 0]
  set action_defined($i) [lindex $line 1]
  incr i
}
close $file

  set action_name($i) stop
  set action_defined($i) stop}

# action_223
set x0 [expr -240 + $offsetX] 
set y0 [expr 290 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_223) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {go_to_home}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {MIL_Home}

# action_224
set x0 [expr 80 + $offsetX] 
set y0 [expr 780 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_224) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {next_action}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set action $learned_action_action($action_count)
set object $learned_action_arg1($action_count)


incr action_count}

# prect_225
set x0 [expr 670 + $offsetX] 
set y0 [expr 590 + $offsetY] 
set obvar [newO prect $x0 $y0 {no 3}]
set r(prect_225) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(prompt,markupText) {<SABLE></SABLE>
}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {manage_coop_play}
set ob(dtmf,interrupt) {0}
set ob(words) {{{{$Agent == "I"}} {} {}} {{{$Agent == "you"}} {} {}} {{{$Agent == "stop"}} {} {}}}
set ob(grammar) {{} {} {}}
set ob(program) {#tts "Cooperation count $coop_count"

	set Agent $coop_agent($coop_count) 
	set Action $coop_action($coop_count) 
	set Object $coop_object($coop_count) 
	set Location $coop_location($coop_count) 



incr coop_count 1}

# action_226
set x0 [expr -170 + $offsetX] 
set y0 [expr 340 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_226) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {query_ORO}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set OROboolean "true"
puts "checking oro $action $object"
if {$using_robot == 1} {

if {$action == "grasp"} {

  if {$object == "toy"} {
     set result [ ORO_Cmd "check" {"[ toy isVisible true]" } ] 
     }

  if {$object == "box"} {
     set result [ ORO_Cmd "check" {"[ cover-box-small isVisible true]" } ] 
     }
set OROboolean [lindex  $result 0]
}

if {$action == "release"} {
 if {$OROboolean == "solo"} {

  if {$object == "middle"} {
     set result [ ORO_Cmd "check" {"[ middle-marke isVisible true]" } ] 
     }

set OROboolean [lindex  $result 0]
}
}




}}

# action_227
set x0 [expr 10.0 + $offsetX] 
set y0 [expr 410.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_227) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {verifyActionDefinitionSimple}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set RequestedAction $action
set ActionDefined finish

#puts "Verify: $RequestedAction"

set i 0

while {$action_name($i) != "stop"  } {
  if [string match $RequestedAction $action_name($i)] {
		
		if [string match "defined" $action_defined($i)] {
		Say "I know how to $RequestedAction"
                                set ActionDefined true
		}
                              
		if [string match "not-defined" $action_defined($i)] {
		Say "I dont know how to $RequestedAction"
                                set ActionDefined false
		}
                              
		if [string match "learned" $action_defined($i)] {
		Say "I learned how to $RequestedAction"
                                set ActionDefined learned
		}
                              
  }
  incr i
}}

# action_228
set x0 [expr -180 + $offsetX] 
set y0 [expr 520 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_228) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {cant_see_it}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {Say "I can't see the $object"
after 2000}

# action_229
set x0 [expr 460 + $offsetX] 
set y0 [expr 770 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_229) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {updateActionDefinitionSimple}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set RequestedAction $action
set ActionDefined finish

puts "Verify: $RequestedAction"

set i 0

while {$action_name($i) != "stop"  } {
  if [string match $LearnedAction $action_name($i)] {
		
		set action_defined($i) learned
                       
  }
  incr i
}}

# action_230
set x0 [expr -130 + $offsetX] 
set y0 [expr 420 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_230) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {check_cooperation}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {if {$OROboolean == "false"  && $Cooperating == "solo"} {
set OROboolean  "solo"
}}

# action_231
set x0 [expr 460 + $offsetX] 
set y0 [expr 800 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_231) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {storeUpdatedActDefs}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set file [open "ActionDefinitionsSimple.txt" w+]
set i 0
while {$action_name($i)  != "stop" } {
	puts $file  "$action_name($i)     $action_defined($i)"
	incr i
	}
puts $file "$action_name($i)     $action_defined($i)"
close $file}

# action_232
set x0 [expr 850 + $offsetX] 
set y0 [expr 460 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_232) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {solo}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {if {$coop_agent(0) == "larry"} {
set replace_larry_with "I"
set replace_robert_with "I"} else {
set replace_larry_with "I"
set replace_robert_with "I"
}

set Cooperating  solo}

# action_233
set x0 [expr -140 + $offsetX] 
set y0 [expr 650 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_233) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {MotorCommand}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {#### distribute the commands
Say "Motor Command  $action $object"

if {$using_robot == 1} {

if {"grasp" == $action} {
	MIL_Take_Hold $object
}


if {"release" == $action}  {
	if { $location != "" } {
		MIL_Drop_On $location
	} else {
		MIL_Drop
	}
}

if [string match raise $action]  {
Say "Motor command raise"
}



}

if [string match stop $action]  {
puts "Motor command stop"
set execute_learned_action -1
}}

# queryone_234
set x0 [expr -80 + $offsetX] 
set y0 [expr 570 + $offsetY] 
set obvar [newO queryone $x0 $y0 {no 1}]
set r(queryone_234) $obvar
upvar #0 $obvar ob
set ob(gif_original) {C:/Program Files/CSLU/Toolkit/2.0/apps/rad/base/gif/generic.gif}
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(changetrigger) {5}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(gif_tmmods) {C:/Program Files/CSLU/Toolkit/2.0/apps/rad/packages/Tucker-Maxon/gif_alt/generic.gif}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(prompt,markupText) {<SABLE></SABLE>
}
set ob(action1) {Say "Need to learn $RequestedAction"}
set ob(override:repair) {0}
set ob(override:tts) {0}
set ob(changerate) {5}
set ob(dyn:recog) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {learn_Action}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set LearnedAction $RequestedAction
set LearnedObject $object
set LearnedLocation $location
set Learning true
set execute_learned_action 0
set action_count 0}
set ob(recognizer) {name adult_english_16khz_0.ob}

# prect_235
set x0 [expr -10 + $offsetX] 
set y0 [expr 680 + $offsetY] 
set obvar [newO prect $x0 $y0 {no 3}]
set r(prect_235) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(prompt,markupText) {<SABLE></SABLE>
}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {state1}
set ob(dtmf,interrupt) {0}
set ob(words) {{{{$execute_learned_action == 0}} {} {}} {{{$execute_learned_action == 1}} {} {}} {{{$execute_learned_action == -1}} {} {}}}
set ob(grammar) {{} {} {}}
set ob(program) {puts "execute_learned_action = $execute_learned_action"}

# queryone_236
set x0 [expr 100 + $offsetX] 
set y0 [expr 590 + $offsetY] 
set obvar [newO queryone $x0 $y0 {no 1}]
set r(queryone_236) $obvar
upvar #0 $obvar ob
set ob(gif_original) {C:/Program Files/CSLU/Toolkit/2.0/apps/rad/base/gif/generic.gif}
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(changetrigger) {5}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(gif_tmmods) {C:/Program Files/CSLU/Toolkit/2.0/apps/rad/packages/Tucker-Maxon/gif_alt/generic.gif}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(prompt,markupText) {<SABLE></SABLE>
}
set ob(action1) {Say "Ok now I know how to $LearnedAction"}
set ob(override:repair) {0}
set ob(override:tts) {0}
set ob(changerate) {5}
set ob(dyn:recog) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {learningFinished}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(recognizer) {name adult_english_16khz_0.ob}

# action_237
set x0 [expr 650 + $offsetX] 
set y0 [expr 500 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_237) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {human_first}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {if {$coop_agent(0) == "larry"} {
set replace_larry_with "you"
set replace_robert_with "I"} else {
set replace_larry_with "I"
set replace_robert_with "you"
}}

# action_238
set x0 [expr 110 + $offsetX] 
set y0 [expr 880 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_238) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {commit}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {Say "Comit the new action"

exec svn commit ActionDefinitionsSimple.txt

Say "Done."

Say "Done."}

# queryone_239
set x0 [expr 300.0 + $offsetX] 
set y0 [expr 380.0 + $offsetY] 
set obvar [newO queryone $x0 $y0 {no 2}]
set r(queryone_239) $obvar
upvar #0 $obvar ob
set ob(gif_original) {R:/Tools/Tools/CSLU/Toolkit/2.0/apps/rad/base/gif/generic.gif}
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(changetrigger) {5}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(gif_tmmods) {R:/Tools/Tools/CSLU/Toolkit/2.0/apps/rad/packages/Tucker-Maxon/gif_alt/generic.gif}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(prompt,markupText) {<SABLE></SABLE>
}
set ob(action1) {Say "action, or shared plan?"}
set ob(recogportType,0) {Words}
set ob(recogportType,1) {Words}
set ob(override:repair) {0}
set ob(recogportType,2) {Words}
set ob(override:tts) {0}
set ob(repairStatus) {default}
set ob(changerate) {5}
set ob(dynamicWords) {{action {@ kc kh S ^ n}} {do_action {dc d u [.pau] @ kc kh S ^ n}} {shared_plan {S E 9r dc d [.pau] pc ph l @ n}}}
set ob(dyn:recog) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(portType,0) {Undefined}
set ob(portType,1) {Undefined}
set ob(package) {Base}
set ob(portType,2) {Undefined}
set ob(override:caption) {0}
set ob(name) {Action_or_shared_plan}
set ob(dtmf,interrupt) {0}
set ob(words) {{{action {do action}} {} {{{@ kc kh S ^ n}} {{dc d u [.pau] @ kc kh S ^ n}}}} {{{shared plan}} {} {{{S E 9r dc d [.pau] pc ph l @ n}}}}}
set ob(grammar) {{{} {}} {{} {}}}
set ob(recognizer) {name adult_english_16khz_0.ob}

# prect_240
set x0 [expr -50 + $offsetX] 
set y0 [expr 830 + $offsetY] 
set obvar [newO prect $x0 $y0 {no 2}]
set r(prect_240) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {cooperating?}
set ob(dtmf,interrupt) {0}
set ob(words) {{{{$Cooperating == 0}} {} {}} {{{$Cooperating != 0}} {} {}}}
set ob(grammar) {{} {}}

# queryone_241
set x0 [expr 260 + $offsetX] 
set y0 [expr 840 + $offsetY] 
set obvar [newO queryone $x0 $y0 {no 2}]
set r(queryone_241) $obvar
upvar #0 $obvar ob
set ob(gif_original) {D:/Robots/Tools/CSLU/Toolkit/2.0/apps/rad/base/gif/generic.gif}
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(changetrigger) {5}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(gif_tmmods) {D:/Robots/Tools/CSLU/Toolkit/2.0/apps/rad/packages/Tucker-Maxon/gif_alt/generic.gif}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(prompt,markupText) {<SABLE></SABLE>
}
set ob(action1) {Say "Do you want to commit the new action file to SVN?"}
set ob(recogportType,0) {Words}
set ob(recogportType,1) {Words}
set ob(override:repair) {0}
set ob(override:tts) {0}
set ob(repairStatus) {default}
set ob(changerate) {5}
set ob(dynamicWords) {{yes_I_do {j E s [.pau] aI [.pau] dc d u}} {No_I_don't {n oU [.pau] aI [.pau] dc d oU n tc th}}}
set ob(dyn:recog) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(portType,0) {Undefined}
set ob(portType,1) {Undefined}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {Commit_to_svn}
set ob(dtmf,interrupt) {0}
set ob(words) {{{{yes I do}} {} {{{j E s [.pau] aI [.pau] dc d u}}}} {{{No I don't}} {} {{{n oU [.pau] aI [.pau] dc d oU n tc th}}}}}
set ob(grammar) {{{} {}} {{} {}}}
set ob(recognizer) {name adult_english_16khz_0.ob}

# queryone_242
set x0 [expr 80 + $offsetX] 
set y0 [expr 350 + $offsetY] 
set obvar [newO queryone $x0 $y0 {no 2}]
set r(queryone_242) $obvar
upvar #0 $obvar ob
set ob(gif_original) {C:/Program Files/CSLU/Toolkit/2.0/apps/rad/base/gif/generic.gif}
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(changetrigger) {5}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(gif_tmmods) {C:/Program Files/CSLU/Toolkit/2.0/apps/rad/packages/Tucker-Maxon/gif_alt/generic.gif}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(prompt,markupText) {<SABLE></SABLE>
}
set ob(action1) {Say "Did you say to $action the $object on the  $location ?"}
set ob(recogportType,0) {Words}
set ob(recogportType,1) {Words}
set ob(override:repair) {0}
set ob(override:tts) {0}
set ob(repairStatus) {default}
set ob(changerate) {5}
set ob(dynamicWords) {{Yes_I_did {j E s [.pau] aI [.pau] dc d I dc d}} {yes {j E s}} {No_I_did_not {n oU [.pau] aI [.pau] dc d I dc d [.pau] n A tc th}} {no {n oU}} {no_sir {n oU [.pau] s 3r}}}
set ob(dyn:recog) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(portType,0) {Undefined}
set ob(portType,1) {Undefined}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {validate}
set ob(dtmf,interrupt) {0}
set ob(words) {{{{Yes I did} yes} {} {{{j E s [.pau] aI [.pau] dc d I dc d}} {{j E s}}}} {{{No I did not} no {no sir}} {} {{{n oU [.pau] aI [.pau] dc d I dc d [.pau] n A tc th}} {{n oU}} {{n oU [.pau] s 3r}}}}}
set ob(grammar) {{{} {}} {{} {}}}
set ob(recognizer) {name adult_english_16khz_0.ob}

# action_243
set x0 [expr 650 + $offsetX] 
set y0 [expr 550 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_243) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {replace_larry_and_robert}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set i 0
Say "Our shared plan is"
while { $coop_agent($i) != "stop"} {
if { $coop_agent($i) == "larry"} {set coop_agent($i) $replace_larry_with} else {
set coop_agent($i) $replace_robert_with}
Say "$coop_agent($i)   $coop_action($i)   the $coop_object($i)  $coop_location($i) "
  incr i
}

set coop_count 0
set continue_play 1}

# prect_244
set x0 [expr 10 + $offsetX] 
set y0 [expr 500 + $offsetY] 
set obvar [newO prect $x0 $y0 {no 4}]
set r(prect_244) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(prompt,markupText) {<SABLE></SABLE>
}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {LearnIfNotDefined}
set ob(dtmf,interrupt) {0}
set ob(words) {{{{$ActionDefined == "true"}} {} {}} {{{$ActionDefined == "false"}} {} {}} {{{$ActionDefined == "finish"}} {} {}} {{{$ActionDefined == "learned"}} {} {}}}
set ob(grammar) {{} {} {} {}}

# action_245
set x0 [expr 660.0 + $offsetX] 
set y0 [expr 320.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_245) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {get_the_old_game}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set Cooperating 1

set file [open "SharedPlan.txt" r]
set i 0
Say " I remember"

# gets with two arguments returns the length of the line,
# -1 if the end of the file is found
#
while { [gets $file line] >= 0 } {
  set coop_agent($i) [lindex $line 0]
  set coop_action($i) [lindex $line 1]
  set coop_object($i) [lindex $line 2]
  set coop_location($i) [lindex $line 3]

if {$coop_agent($i) != "stop"} {Say "$coop_agent($i)   $coop_action($i)   $coop_object($i)  $coop_location($i)"}
  incr i
}
close $file

set coop_play 1
set coop_count 0}

# prect_246
set x0 [expr -110 + $offsetX] 
set y0 [expr 500 + $offsetY] 
set obvar [newO prect $x0 $y0 {no 3}]
set r(prect_246) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {state8}
set ob(dtmf,interrupt) {0}
set ob(words) {{{{$OROboolean == "false"}} {} {}} {{{$OROboolean == "true"}} {} {}} {{{$OROboolean == "solo"}} {} {}}}
set ob(grammar) {{} {} {}}

# action_247
set x0 [expr 20 + $offsetX] 
set y0 [expr 600 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_247) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {retrieve_learned_action}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {if {$RequestedAction == "put"} {
set file [open "Place.txt" r]
}

if {$RequestedAction == "play"} {
set file [open "Play.txt"  r]
}


set i 0


# gets with two arguments returns the length of the line,
# -1 if the end of the file is found
#
while { [gets $file line] >= 0 } {
  set learned_action_action($i) [lindex $line 0]
  set learned_action_arg1($i) [lindex $line 1]

  if [string match [lindex $line 1] object ] {

   set learned_action_arg1($i) $object
    }

  if [string match [lindex $line 1] location ] {

   set learned_action_arg1($i) $location
    }



#  set learned_action_arg2($i) [lindex $line 2]

puts "binding resolved  $learned_action_action($i)  $learned_action_arg1($i) "
  incr i
}
close $file

# now set the first action and start the sequence


set action_count 0
set execute_learned_action 1}

# queryone_248
set x0 [expr 700 + $offsetX] 
set y0 [expr 650 + $offsetY] 
set obvar [newO queryone $x0 $y0 {no 1}]
set r(queryone_248) $obvar
upvar #0 $obvar ob
set ob(gif_original) {C:/Program Files/CSLU/Toolkit/2.0/apps/rad/base/gif/generic.gif}
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(changetrigger) {5}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(gif_tmmods) {C:/Program Files/CSLU/Toolkit/2.0/apps/rad/packages/Tucker-Maxon/gif_alt/generic.gif}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(prompt,markupText) {<SABLE></SABLE>
}
set ob(action1) {Say "Now, you $Action the $Object $Location"
after 2000
Say "is it ok?"}
set ob(recogportType,0) {Words}
set ob(recogportType,1) {Words}
set ob(override:repair) {0}
set ob(override:tts) {0}
set ob(repairStatus) {default}
set ob(changerate) {5}
set ob(dynamicWords) {{o_k {oU [.pau] kc kh ei}} {good {gc g U dc d}} {fine {f aI n}}}
set ob(dyn:recog) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(portType,0) {Undefined}
set ob(portType,1) {Undefined}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {user_movement_status}
set ob(dtmf,interrupt) {0}
set ob(words) {{{{o k} good fine} {} {{{oU [.pau] kc kh ei}} {{gc g U dc d}} {{f aI n}}}}}
set ob(grammar) {{{} {}}}
set ob(recognizer) {name adult_english_16khz_0.ob}

# action_249
set x0 [expr 470 + $offsetX] 
set y0 [expr 570 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_249) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {robot_first}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {if {$coop_agent(0) == "larry"} {
set replace_larry_with "I"
set replace_robert_with "you"} else {
set replace_larry_with "you"
set replace_robert_with "I"
}}

# action_250
set x0 [expr 230 + $offsetX] 
set y0 [expr 650 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_250) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {store_learned_action}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set learned_action_action($action_count) stop
set learned_action_arg1($action_count) stop
set i 0

Say "requested action is $LearnedAction"

if {$LearnedAction == "put"} {
set file [open "Place.txt" w+]
}

if {$LearnedAction == "play"} {
set file [open "Play.txt" w+]
}
set i 0
while {$learned_action_action($i)  != "stop" } {
	puts $file  "$learned_action_action($i)  $learned_action_arg1($i)"
	incr i
	}
puts $file "$learned_action_action($i)      $learned_action_arg1($i)"
close $file


# put in cooperative play state}

# action_251
set x0 [expr -170 + $offsetX] 
set y0 [expr 780 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_251) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {update_action_learning}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set learned_action_action($action_count) $action
set learned_action_arg1($action_count) $object



tts "learn $action"

# do correct argument binding

if  [string match $LearnedObject $object] {
#tts "arg 1 binding"
set learned_action_arg1($action_count) object
}

if  [string match $LearnedLocation $object] {
#tts "arg2 binding"
set learned_action_arg1($action_count) location
}

set learned_action_action($action_count) $action

 incr action_count}

# queryone_252
set x0 [expr 650 + $offsetX] 
set y0 [expr 460 + $offsetY] 
set obvar [newO queryone $x0 $y0 {no 3}]
set r(queryone_252) $obvar
upvar #0 $obvar ob
set ob(gif_original) {C:/Program Files/CSLU/Toolkit/2.0/apps/rad/base/gif/generic.gif}
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(changetrigger) {5}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(gif_tmmods) {C:/Program Files/CSLU/Toolkit/2.0/apps/rad/packages/Tucker-Maxon/gif_alt/generic.gif}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(prompt,markupText) {<SABLE></SABLE>
}
set ob(action1) {Say "Who goes first - you or me?  Or solo."}
set ob(recogportType,0) {Words}
set ob(recogportType,1) {Words}
set ob(override:repair) {0}
set ob(recogportType,2) {Words}
set ob(override:tts) {0}
set ob(repairStatus) {default}
set ob(changerate) {5}
set ob(dynamicWords) {{you {j u}} {you_go_first {j u [.pau] gc g oU [.pau] f 3r s tc th}} {me {m i:}} {solo {s oU l oU}}}
set ob(dyn:recog) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(portType,0) {Undefined}
set ob(portType,1) {Undefined}
set ob(package) {Base}
set ob(portType,2) {Undefined}
set ob(override:caption) {0}
set ob(name) {decide_roles}
set ob(dtmf,interrupt) {0}
set ob(words) {{{you {you go first}} {} {{{j u}} {{j u [.pau] gc g oU [.pau] f 3r s tc th}}}} {me {} {{{m i:}}}} {solo {} {{{s oU l oU}}}}}
set ob(grammar) {{{} {}} {{} {}} {{} {}}}
set ob(program) {set Cooperating 1

#WriteDown "Starting shared plan"}
set ob(recognizer) {name adult_english_16khz_0.ob}

# action_253
set x0 [expr 500 + $offsetX] 
set y0 [expr 700 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_253) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {my_move}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {Say "Now, I $Action the $Object $Location"
set action $Action
set object $Object
set location $Location}

# exit_254
set x0 [expr 350 + $offsetX] 
set y0 [expr 320 + $offsetY] 
set obvar [newO exit $x0 $y0 {no 0}]
set r(exit_254) $obvar
upvar #0 $obvar ob
set ob(bargein) {off}
set ob(override:recognizer) {0}
set ob(recogType) {Tree}
set ob(dtmf,interrupt) {0}
set ob(dtmf,mode) {off}
set ob(package) {Base}
set ob(override:tts) {0}
set ob(exitStatus) {continue}
set ob(override:caption) {0}
set ob(prompt,type) {tts}
set ob(name) {return:continue}
set ob(override:vumeter) {0}
set ob(override:sdet) {0}
set ob(prompt,recordFlag) {0}

# action_255
set x0 [expr 150 + $offsetX] 
set y0 [expr 230 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_255) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {RecognizeSpokenAction}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set results -1

set action "sharedPlan"

while { $results == -1 } {
	Say "What is the action?"
	set g "grasp the #Object | release the #Object on the #Object | release the #Object |  put the #Object on the #Object | finish | shared plan" 
	set results [SM_Reco_Grammar $g ]
	puts "Reco : $results"
}
set recoValue [lindex $results 0]

if { $recoValue == "grasp"} {
	set action "grasp"
	set object [lindex $results 2]
	set location ""
}

if { $recoValue == "release"} {
	set action "release"
	set object [lindex $results 2]
	set location [lindex $results 5]
}

if { $recoValue == "put"} {
	set action "put"
	set object [lindex $results 2]
	set location [lindex $results 5]
}

if { $recoValue == "finish"} {
	set action "finish"
	set object '""
	set location ""
}}

# prect_256
set x0 [expr 150 + $offsetX] 
set y0 [expr 310 + $offsetY] 
set obvar [newO prect $x0 $y0 {no 2}]
set r(prect_256) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {state4}
set ob(dtmf,interrupt) {0}
set ob(words) {{{{$action == "sharedPlan"}} {} {}} {1 {} {}}}
set ob(grammar) {{} {}}

####### CONNECTIONS
connect r prect_235 action_224 1 6.0 758.0 51.0 757.0 96.0 765.0 $offsetX $offsetY
connect r prect_246 action_233 1 -94.0 578.0 -109.0 602.0 -124.0 635.0 $offsetX $offsetY
connect r queryone_241 action_238 0 226.0 918.0 196.0 887.0 166.0 865.0 $offsetX $offsetY
connect r enter_220 action_221 0 16.0 228.0 11.0 212.0 6.0 205.0 $offsetX $offsetY
connect r queryone_234 action_255 0 -24.0 648.0 51.0 427.0 126.0 215.0 $offsetX $offsetY
connect r action_245 queryone_252 0 636.0 398.0 651.0 421.5 666.0 445.0 $offsetX $offsetY
connect r queryone_252 action_249 0 646.0 538.0 566.0 542.0 486.0 555.0 $offsetX $offsetY
connect r action_233 prect_235 0 -84.0 728.0 -59.0 692.0 -34.0 665.0 $offsetX $offsetY
connect r action_230 prect_246 0 -114.0 498.0 -104.0 487.0 -94.0 485.0 $offsetX $offsetY
connect r action_228 action_230 0 -204.0 598.0 -204.0 405.0 -114.0 405.0 $offsetX $offsetY
connect r action_223 queryone_239 0 -224.0 368.0 46.0 366.5 316.0 365.0 $offsetX $offsetY
connect r prect_235 action_251 0 -14.0 758.0 -84.0 757.0 -154.0 765.0 $offsetX $offsetY
connect r prect_246 prect_225 2 -74.0 578.0 306.0 572.0 686.0 575.0 $offsetX $offsetY
connect r queryone_239 action_255 0 236.0 508.0 256.0 336.5 166.0 215.0 $offsetX $offsetY
connect r prect_256 action_245 0 156.0 388.0 416.0 346.5 676.0 305.0 $offsetX $offsetY
connect r prect_244 queryone_234 1 16.0 578.0 -24.0 562.0 -64.0 555.0 $offsetX $offsetY
connect r action_221 action_222 0 6.0 298.0 6.0 277.0 6.0 265.0 $offsetX $offsetY
connect r action_250 action_229 0 246.0 728.0 361.0 737.0 476.0 755.0 $offsetX $offsetY
connect r action_243 prect_225 0 626.0 628.0 626.0 575.0 686.0 575.0 $offsetX $offsetY
connect r queryone_241 action_255 1 246.0 918.0 226.0 562.0 206.0 215.0 $offsetX $offsetY
connect r action_224 action_233 0 56.0 858.0 -14.0 742.0 -84.0 635.0 $offsetX $offsetY
connect r prect_225 queryone_248 1 686.0 668.0 701.0 647.0 716.0 635.0 $offsetX $offsetY
connect r prect_244 queryone_236 2 36.0 578.0 76.0 572.0 116.0 575.0 $offsetX $offsetY
connect r action_251 action_255 0 -114.0 858.0 6.0 532.0 126.0 215.0 $offsetX $offsetY
connect r action_253 action_227 0 476.0 778.0 271.0 586.5 66.0 395.0 $offsetX $offsetY
connect r queryone_242 action_227 0 86.0 428.0 56.0 411.5 26.0 395.0 $offsetX $offsetY
connect r action_255 prect_256 0 166.0 308.0 166.0 297.0 166.0 295.0 $offsetX $offsetY
connect r action_237 action_243 0 626.0 578.0 626.0 535.0 666.0 535.0 $offsetX $offsetY
connect r prect_240 prect_225 1 16.0 908.0 331.0 737.0 646.0 575.0 $offsetX $offsetY
connect r queryone_242 action_255 1 146.0 428.0 136.0 317.0 126.0 215.0 $offsetX $offsetY
connect r prect_225 action_253 0 666.0 668.0 591.0 672.0 516.0 685.0 $offsetX $offsetY
connect r queryone_252 action_232 2 726.0 538.0 776.0 487.0 826.0 445.0 $offsetX $offsetY
connect r action_226 action_230 0 -154.0 418.0 -134.0 407.0 -114.0 405.0 $offsetX $offsetY
connect r action_231 queryone_241 0 436.0 878.0 376.0 847.0 316.0 825.0 $offsetX $offsetY
connect r queryone_239 action_245 1 366.0 458.0 501.0 381.5 636.0 305.0 $offsetX $offsetY
connect r action_249 action_243 0 526.0 648.0 576.0 587.0 626.0 535.0 $offsetX $offsetY
connect r prect_225 queryone_239 2 666.0 668.0 511.0 516.5 356.0 365.0 $offsetX $offsetY
connect r action_222 queryone_239 0 6.0 358.0 161.0 361.5 316.0 365.0 $offsetX $offsetY
connect r action_232 action_243 0 866.0 538.0 766.0 532.0 666.0 535.0 $offsetX $offsetY
connect r prect_246 action_228 0 -74.0 578.0 -74.0 505.0 -164.0 505.0 $offsetX $offsetY
connect r queryone_248 prect_225 0 756.0 728.0 756.0 575.0 686.0 575.0 $offsetX $offsetY
connect r prect_240 action_255 0 -4.0 908.0 61.0 557.0 126.0 215.0 $offsetX $offsetY
connect r prect_256 queryone_242 1 136.0 388.0 136.0 357.0 136.0 335.0 $offsetX $offsetY
connect r prect_235 prect_240 2 26.0 758.0 -4.0 782.0 -34.0 815.0 $offsetX $offsetY
connect r queryone_236 action_250 0 116.0 668.0 181.0 647.0 246.0 635.0 $offsetX $offsetY
connect r action_229 action_231 0 436.0 848.0 436.0 785.0 476.0 785.0 $offsetX $offsetY
connect r action_238 action_255 0 86.0 958.0 86.0 215.0 166.0 215.0 $offsetX $offsetY
connect r prect_244 action_247 3 56.0 578.0 46.0 577.0 36.0 585.0 $offsetX $offsetY
connect r action_227 prect_244 0 26.0 488.0 26.0 486.5 26.0 485.0 $offsetX $offsetY
connect r prect_244 action_230 0 -44.0 578.0 -59.0 487.0 -74.0 405.0 $offsetX $offsetY
connect r action_247 action_224 0 36.0 678.0 66.0 717.0 96.0 765.0 $offsetX $offsetY
connect r queryone_252 action_237 1 626.0 538.0 626.0 485.0 666.0 485.0 $offsetX $offsetY
recordActiveScreen $p
array set config {arrayName config vumeter,geometry +100+10 warning,load:inappropriate 1 changetrigger 5 alpha,searchsize 100000 beep 1 dtmf,mode off dtmf,endchar 0 tmmods:pause 0 RAD_VERSION 2.0 releaseServices 0 about,comments {Click on the URL above for tutorial details.} backup 1 garbageThreshold -417 alpha,reject 0.1 input live highlight 1 about,author CSLU review 0 rejection 22 alpha,prune 0.0001 default:tts,voice {name mwm} showConsole 0 reRun 0 confirm,nuke 1 RAD_PATCHLEVEL 0 caption 0 stdevMic 24 palette,zoom 100 dtmf,var {} defaultTtsDevice {type Festival} useRepair 1 confirm,clear 1 palette,stick 1 ttsDevice {type Festival hostname *} about,date 06/27/99 confirm,quit 1 palette,rows {} lsilence 5000 pronun,tts 1 changerate 5 audioDevice {type audio hostname local name {Speakers (High Definition Audio}} snapToGrid 1 longpen 0.135 confirm,newload 1 palette,columns 2 backoff 150 dtmf,maxlen 1 mic,device 0 showCanvas 1 dyn:recog 0 mic,key <Space> dtmf,timeout 5000 tsilence 300 mic,event 0 tts,pitch 158 beepwave {C:/Program Files/CSLU/Toolkit/2.0/apps/rad/endbeep.wav} vumeter,enabled 1 bargein 0 about,url docs/2.0/apps/rad/tutorials/tutorial015/index.html active 1.0 confirm,new 1 configfile C:/Users/iCub/.rad/config.tcl visual,iMode 0 dataCapture 0 defaultAudioDevice {type audio hostname local} alpha,deletepen 0.05 edit,noEmptyPrompt 1 wordspot 30 tts,rate 1.00 repairFile {C:/Program Files/CSLU/Toolkit/2.0/apps/rad/Repair/default1.rad} tmmods:listallmedia 0 runTrace 0 prompt,dir C:/.rad pronun,customdict 1 ttsCache 0 maxrec 100 alpha,langpower 0.0 tmmods:extralogging 0 faces {} audio tv baldi 0 tts,pitchrange 34 dtmf,interrupt 0 nbest 4 pronun,localdict 1 edit,usedFacesOnly 1 paths {configfile {Configuration File} beepwave {Beep File} prompt,dir {Prompt Directory} repairFile {Default Repair File}} recognizer {name adult_english_16khz_0.ob infoLang * infoDial * infoRate * infoDesc *} showRecog 0 shortpen 0.0025 pronun,cmu 1 tmmods:iconlook 0 recogMode 1 face,type CUAnimate tts,voice {name mwm language English dialect * gender *} visual,DCP 0 cachesize 100}

