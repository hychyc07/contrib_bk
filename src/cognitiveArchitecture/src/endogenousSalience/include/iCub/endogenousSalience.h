/** 
 * @ingroup icub_module
 *
 * \defgroup icub_endogenousSalience endogenousSalience
 *
 * Simple endogenous salience computation using colour segmentation.
 * The input image is segmented into foreground and background in HS (Hue-Saturation) space.
 * The parameters for the segmentation, i.e. the hue and saturation ranges of foreground regions, 
 * are extracted automatically from a log-polar image which is provided as input to the module.  
 * Typically, this log-polar image will have been generated by the attention system when fixating on some point of interest.
 * The hue and saturation ranges are defined as the log-polar image modal hue and saturation values 
 * +/- some tolerance (expressed as a percentage of the hue and saturation range values, [0-360] and [0-1] respectively).
 * The segmented image is filtered to remove small regions by performing a morphological opening.
 *
 * The hue and saturation tolerance percentage values and the morphological filter radius value are provided as parameters to the module.
 * The number of hue and saturation bins in the histogram used to identify the modal hue and saturation value 
 * are also provided as parameters.
 *
 * The module produces one output: the salience image, i.e. the segmented version of the input RGB Cartesian image.
 *
 * \section lib_sec Libraries
 *
 * YARP.
 *
 * \section parameters_sec Parameters
 * 
 * <b>Command-line Parameters</b>
 * 
 * The following key-value pairs can be specified as command-line parameters by prefixing \c -- to the key 
 * (e.g. \c --from \c file.ini ). The value part can be changed to suit your needs; the default values are shown below. 
 *
 * - \c from \c endogenousSalience.ini       \n
 *   specifies the configuration file
 *
 * - \c context \c endogenousSalience/conf  \n 
 *   specifies the sub-path from \c $ICUB_ROOT/icub/app to the configuration file
 *
 * - \c name \c endogenousSalience \n         
 *   specifies the name of the module (used to form the stem of module port names)  
 *
 * - \c robot \c icub \n          
 *   specifies the name of the robot (used to form the root of robot port names)
 *
 * 
 * <b>Module Configuration File Parameters</b>
 *
 * The following key-value pairs can be specified as parameters in the configuration file e.g. \c endogenousSalience.ini 
 * (they can also be specified as command-line parameters if you so wish). 
 * The value part can be changed to suit your needs; the default values are shown below. 
 *   
 * - \c cartesianImageInPort \c /cartesianImage:i \n  
 *   specifies the input port name 
 *
 * - \c logpolarImageInPort \c /logpolarImage:i   \n  
 *   specifies the input port name  
 *
 * - \c salienceOutPort \c /salience:o   \n  
 *   specifies the output port name for the salience bottle to be used by   
 *
 * - \c hueTolerance \c 10 \n           
 *   specifies the percentage tolerance on the hue value used to segment the image
 *
 * - \c saturationTolerance \c 10 \n           
 *   specifies the percentage tolerance on the saturation value used to segment the image
 *
 * - \c hueBins \c 32 \n           
 *   specifies the number of hue bins in the HS histogram used to determing the modal HS value
 *
 * - \c saturationBins \c 32 \n           
 *   specifies the number of saturation bins in the HS histogram used to determing the modal HS value
 *
 * - \c filterRadius \c 1 \n           
 *   specifies the radius in pixels of the morphological opening filter used to remove small regions from the segmented image.
 *
 *
 * All the port names will be prefixed by \c /endogenousSalience or whatever else is specifed by the name parameter.
 *
 * \section portsa_sec Ports Accessed
 * 
 * None
 *                      
 * \section portsc_sec Ports Created
 *
 * <b>Input ports</b>
 *
 * - \c /endogenousSalience \n
 *   This port is used to change the parameters of the module at run time or stop the module
 *   The following commands are available
 * 
 *   \c help \n
 *   \c quit
 *   \c set \c hue \c <n>   ... set the percentage tolerance on the hue value used to segment the image  
 *   \c set \c sat \c <n>   ... set the percentage tolerance on the saturation value used to segment the image
 *   \c set \c rad \c <m>   ... set the radius of the filter used to remove small regions from the segmented the image
 *   (where \c <n> is an integer number in the range [0,100] and m is an integer number >= 0)
 *
 *   Note that the name of this port mirrors whatever is provided by the \c --name parameter value
 *   The port is attached to the terminal so that you can type in commands and receive replies.
 *   The port can be used by other modules but also interactively by a user through the yarp rpc directive, viz.: \c yarp \c rpc \c /endogenousSalience
 *   This opens a connection from a terminal to the port and allows the user to then type in commands and receive replies.
 *       
 * - \c /endogenousSalience/cartesianImage:i 
 *
 * - \c /endogenousSalience/logpolarImage:i
 *
 * <b>Output ports</b>
 *
 * - \c /endogenousSalience \n
 *   see above
 *
 * - \c /endogenousSalience/salience:o
 *
 *
 * <b>Port types </b>
 *
 * The functional specification only names the ports to be used to communicate with the module 
 * but doesn't say anything about the data transmitted on the ports. This is defined by the following code. 
 *
 * \c BufferedPort<ImageOf<PixelRgb> >   \c cartesianImageInPort;     \n
 * \c BufferedPort<ImageOf<PixelRgb> >   \c logpolarImageInPort;      \n
 * \c BufferedPort<ImageOf<PixelRgb> >   \c salienceImageOutPort;    \n
 *
 * \section in_files_sec Input Data Files
 *
 * None
 *
 * \section out_data_sec Output Data Files
 *
 * None
 *
 * \section conf_file_sec Configuration Files
 *
 * \c endogenousSalience.ini  in \c $ICUB_ROOT/app/endogenousSalience/conf \n
 * 
 * \section tested_os_sec Tested OS
 *
 * Windows
 *
 * \section example_sec Example Instantiation of the Module
 * 
 * <tt>endogenousSalience --name endogenousSalience --context endogenousSalience/conf --from endogenousSalience.ini --robot icub  --configCamera icubEyes.ini</tt>
 *
 * \author 
 *
 * David Vernon
 * 
 * Copyright (C) 2009 RobotCub Consortium
 * 
 * CopyPolicy: Released under the terms of the GNU GPL v2.0.
 * 
 * This file can be edited at \c $ICUB_ROOT/src/endogenousSalience/include/iCub/endogenousSalience.h
 * 
 */


/* 
 * Copyright (C) 2009 RobotCub Consortium, European Commission FP6 Project IST-004370
 * Authors: David Vernon
 * email:   david@vernon.eu
 * website: www.robotcub.org 
 * Permission is granted to copy, distribute, and/or modify this program
 * under the terms of the GNU General Public License, version 2 or any
 * later version published by the Free Software Foundation.
 *
 * A copy of the license can be found at
 * http://www.robotcub.org/icub/license/gpl.txt
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
 * Public License for more details
 */


#ifndef __ICUB_RECTIFICATION_MODULE_H__
#define __ICUB_RECTIFICATION_MODULE_H__


/* System includes */

#include <iostream>
#include <string>


/* YARP includes */

#include <yarp/sig/all.h>
#include <yarp/os/all.h>
#include <yarp/os/RFModule.h>
#include <yarp/os/Network.h>
#include <yarp/os/Thread.h>
#include <yarp/dev/PolyDriver.h>

using namespace std;
using namespace yarp::os; 
using namespace yarp::sig;
using namespace yarp::dev;


/* fourierVision includes */

#include "iCub/fourierVision.h"


class EndogenousSalienceThread : public Thread
{
private:

   /* class variables */

   int    x, y;
   int    width, height, depth;    // dimensions of the image
   float  hueMode, saturationMode;
   float  hueRange,saturationRange;
   bool debug; 
   
   PixelRgb rgbPixel;
   PixelRgb blobPixel;
   ImageOf<PixelRgb> *cartesianImage;
   ImageOf<PixelRgb> *logpolarImage;
   Vector            *encoderPositions;
   DVimage           *cartesianInput;
   DVimage           *logpolarInput;
   DVimage           *segmentedOutput;
   DVimage           *tempImageA;
   DVimage           *tempImageB;
   DVhs_histogram    *hsHistogram;


  	    
   /* thread parameters: they are pointers so that they refer to the original variables in endogenousSalience */

   BufferedPort<ImageOf<PixelRgb> > *cartesianImagePortIn;
   BufferedPort<ImageOf<PixelRgb> > *logpolarImagePortIn;
   BufferedPort<ImageOf<PixelRgb> > *salienceImagePortOut;

   int   *hueTolerance;          // tolerances on hue and saturation values for segmentation
   int   *saturationTolerance; 
   int   *filterRadius;          // size of morphological opening filter
   int   *hueBins;                // number of hue bins in the HS histogram
   int   *saturationBins;         // number of saturation bins in the HS histogram

public:

   /* class methods */

   EndogenousSalienceThread(BufferedPort<ImageOf<PixelRgb> > *cartesianImageIn, 
                            BufferedPort<ImageOf<PixelRgb> > *logpolarImageIn,
                            BufferedPort<ImageOf<PixelRgb> > *salienceImageOut, 
                            int   *hueTolerance, 
                            int   *saturationTolerance,
                            int   *hueBins,
                            int   *saturationBins,
                            int   *filterRadius);
   bool threadInit();     
   void threadRelease();
   void run(); 
};


class EndogenousSalience:public RFModule
{
   /* module parameters */

   string moduleName;
   string robotName; 
   string cartesianInputPortName;
   string logpolarInputPortName;
   string salienceOutputPortName;  
   string handlerPortName;
   int    hueTolerance, saturationTolerance;   // tolerances on hue and saturation values for segmentation
   int    filterRadius;
   int    hueBins;
   int    saturationBins;

   /* class variables */

   bool debug;

   BufferedPort<ImageOf<PixelRgb> > cartesianImageIn;      
   BufferedPort<ImageOf<PixelRgb> > logpolarImageIn;      
   BufferedPort<ImageOf<PixelRgb> > salienceImageOut;     
   Port                             handlerPort;      //a port to handle messages 

   /* pointer to a new thread to be created and started in configure() and stopped in close() */

   EndogenousSalienceThread *endogenousSalienceThread;


public:
   EndogenousSalience();
   bool configure(yarp::os::ResourceFinder &rf); // configure all the module parameters and return true if successful
   bool interruptModule();                       // interrupt, e.g., the ports 
   bool close();                                 // close and shut down the module
   bool respond(const Bottle& command, Bottle& reply);
   double getPeriod(); 
   bool updateModule();
};


#endif // __ICUB_RECTIFICATION_MODULE_H__
//empty line to make gcc happy

