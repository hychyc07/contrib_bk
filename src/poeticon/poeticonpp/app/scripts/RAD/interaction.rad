###
### SCALE: 100
### CSLUVERSION: 2.0.0
###
set Coord "-490.0 660.0 672.0 1132.0"

#----------------------------------------------------------------------------
# Packages
#----------------------------------------------------------------------------
requirePackage Base {Built-in RAD object types} {Copyright (C) 1996-2002 Center for Spoken Language Understanding
  OGI School of Science & Engineering
  Oregon Health & Science University} http://cslu.cse.ogi.edu/toolkit/docs/2.0/apps/rad/objects/index.html#base
#----------------------------------------------------------------------------


##### ROOT SCREEN
set offsetX [expr $x - -490.0]
set offsetY [expr $y - 660.0]
set p $ObjectTypes(activeScreen)

# input_23
set x0 [expr -90.0 + $offsetX] 
set y0 [expr 660.0 + $offsetY] 
set obvar [newO input $x0 $y0 {no 1}]
set r(input_23) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {start}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}

# action_24
set x0 [expr -90.0 + $offsetX] 
set y0 [expr 1080.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_24) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {CheckConnections}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set ConnectionStatus [ConnectionChecker_Connect]

if { $ConnectionStatus == 0 } {
Say "Connections missing"
} else {
Say "OK"
}}

# prect_25
set x0 [expr -90.0 + $offsetX] 
set y0 [expr 1180.0 + $offsetY] 
set obvar [newO prect $x0 $y0 {no 2}]
set r(prect_25) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {check}
set ob(dtmf,interrupt) {0}
set ob(words) {{{{$ConnectionStatus == 1}} {} {}} {{{$ConnectionStatus == 0}} {} {}}}
set ob(grammar) {{} {}}

# action_26
set x0 [expr -110.0 + $offsetX] 
set y0 [expr 1260.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_26) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {Entry_Point}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {Say "Ready."}

# queryone_27
set x0 [expr 150.0 + $offsetX] 
set y0 [expr 1220.0 + $offsetY] 
set obvar [newO queryone $x0 $y0 {no 3}]
set r(queryone_27) $obvar
upvar #0 $obvar ob
set ob(gif_original) {C:/Program Files/CSLU/Toolkit/2.0/apps/rad/base/gif/generic.gif}
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(changetrigger) {5}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(gif_tmmods) {C:/Program Files/CSLU/Toolkit/2.0/apps/rad/packages/Tucker-Maxon/gif_alt/generic.gif}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(prompt,markupText) {<SABLE></SABLE>
}
set ob(action1) {Say "Retry, skip or give-up?"}
set ob(recogportType,0) {Words}
set ob(recogportType,1) {Words}
set ob(override:repair) {0}
set ob(recogportType,2) {Words}
set ob(override:tts) {0}
set ob(repairStatus) {default}
set ob(changerate) {5}
set ob(dynamicWords) {{retry {9r i: tc th 9r aI}} {skip {s kc kh I pc ph}} {give-up {gc g I v & pc ph}}}
set ob(dyn:recog) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(portType,0) {Undefined}
set ob(portType,1) {Undefined}
set ob(package) {Base}
set ob(portType,2) {Undefined}
set ob(override:caption) {0}
set ob(name) {Handle_connections}
set ob(dtmf,interrupt) {0}
set ob(words) {{retry {} {{{9r i: tc th 9r aI}}}} {skip {} {{{s kc kh I pc ph}}}} {give-up {} {{{gc g I v & pc ph}}}}}
set ob(grammar) {{{} {}} {{} {}} {{} {}}}
set ob(recognizer) {name adult_english_16khz_0.ob}

# action_28
set x0 [expr -90.0 + $offsetX] 
set y0 [expr 980.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_28) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {module_MILmanager}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {Port segmentPort
segmentPort open "/activateSeg"

Port stringPort
stringPort open "/RADSpeech"


if {$usingRobot == 1} {
	#ConnectionChecker_Add "/activateSeg" "/activeSeg/fixPoint:i"
	ConnectionChecker_Add "/RADSpeech" "/graspManager/cmdString:i"
}

#DEFINES USEFULL PROCEDURES

proc closeSegmentPort  { } {
	segmentPort close
}

proc closeStringPort  { } {
	stringPort close
}

proc Speak { text } {
	bottle clear
	bottle addString $text
	speechPort write bottle
	puts "sent:"
	puts [bottle toString]
}

proc What_Is { } {
	bottle clear
	bottle addString "fix"
	segmentPort write bottle

	bottle clear
	bottle addString "what"
	stringPort write bottle
}

proc This_Is { objectName } {
	bottle clear
	bottle addString "learn"
	bottle addString $objectName
	stringPort write bottle

	bottle clear
	bottle addString "fix"
	segmentPort write bottle
}}

# subnet_29
set x0 [expr -90.0 + $offsetX] 
set y0 [expr 820.0 + $offsetY] 
set obvar [newO subnet $x0 $y0 {no 1}]
set r(subnet_29) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {Initialisation_Procedures}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}

# action_30
set x0 [expr -90.0 + $offsetX] 
set y0 [expr 900.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_30) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {module_microsoft_SAPI}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {Port SpeechManagerPort
SpeechManagerPort open "/RAD/speechRecognizer:o"
ConnectionChecker_Add "/RAD/speechRecognizer:o" "/speechRecognizer/rpc"

#DEFINES USEFULL PROCEDURES
proc SM_close { } {
SpeechManagerPort close
}

proc Say { what } {
	bottle clear
	reply clear
	bottle addString "tts"
	bottle addString $what
	SpeechManagerPort write bottle reply
	puts "Say : $what "
	#tts $what
}

proc SM_RGM_Expand_Auto { vocabulory } {
	bottle clear
	bottle addString "RGM"
	bottle addString "vocabulory"
	bottle addString "addAuto"
	bottle addString $vocabulory
	SpeechManagerPort write bottle reply
	#puts "Received from SpeechManager : [reply toString] "
	return  [ [reply get 1] toString] 
}

proc SM_RGM_Expand { vocabulory  word } {
	bottle clear
	bottle addString "RGM"
	bottle addString "vocabulory"
	bottle addString "add"
	bottle addString $vocabulory
	bottle addString $word
	
	SpeechManagerPort write bottle reply
	#puts "Received from SpeechManager : [reply toString] "
}

proc SM_Expand_asyncrecog { gram } {

	bottle clear
	bottle addString "asyncrecog"
	bottle addString "addGrammar"
	bottle addString $gram
	SpeechManagerPort write bottle reply
	#puts "Received from SpeechManager : [reply toString] "
}

proc SM_Reco_Grammar { gram } {

	bottle clear
	bottle addString "recog"
	bottle addString "grammarSimple"
	bottle addString $gram
	SpeechManagerPort write bottle reply
	puts "Received from SpeechManager : [reply toString] "
	set wordsList ""
	for { set i 1 } { $i< [reply size] } {incr i 2} {
		set wordsList [lappend wordsList [ [reply get $i] toString] ]
	}
	return $wordsList
}

proc SM_Reco_Dictation { } {
	bottle clear
	bottle addString "recog"
	bottle addString "dictation"
	SpeechManagerPort write bottle reply
	puts "Received from SpeechManager : [reply toString] "
	set wordsList ""
	for { set i 1 } { $i< [reply size] } {incr i 2} {
		set wordsList [lappend wordsList [ [reply get $i] toString] ]
	}
	return $wordsList
}}

# action_31
set x0 [expr -490.0 + $offsetX] 
set y0 [expr 1220.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_31) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {initialise_Vocabulories}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {#Vocabulory for objects
puts "Initialising vocabulory..."

set w1 "null"
set w2 "null"
set w3 "null"
set w4 "null"
set w5 "null"
set w6 "null"
set w7 "null"
set w8 "null"
set w9 "null"

set VOCABULORY "{purple-car} octopus lego {pink-ball} box toy left middle right"

getIDs $VOCABULORY w1 w2 w3 w4 w5 w6 w7 w8 w9

puts "the objects are: $w1 $w2 $w3 $w4 $w5 $w6 $w7 $w8 $w9"

if { $w1 == "ack" } {
	set VOCABULORY "$w1 $w2 $w3 $w4 $w5 $w6 $w7 $w8 $w9"
} else {
	
}

for { set i 0 } { $i < [llength $VOCABULORY] } { incr i 1 } {
	puts "Expanding vocabulory Object with \"[lindex $VOCABULORY $i]\""
	SM_RGM_Expand "#Object" [lindex $VOCABULORY $i]
}

#Vocabulory for Actions
puts "Initialising vocabulory..."

set VOCABULORY "{point at} {what is this}"

for { set i 0 } { $i < [llength $VOCABULORY] } { incr i 1 } {
	puts "Expanding vocabulory Object with \"[lindex $VOCABULORY $i]\""
	SM_RGM_Expand "#Action" [lindex $VOCABULORY $i]
}

puts "Adding stuff to the async grammar"
SM_Expand_asyncrecog "icub-stop-now"}

# action_32
set x0 [expr -110.0 + $offsetX] 
set y0 [expr 1470.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_32) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {Menu}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set results -1

while { $results == -1 } {
	#Say "What should I do?"
	set g "What is this | This is an #Object | See you soon" 
	set results [SM_Reco_Grammar $g ]
	puts "Reco : $results"
}
set recoValue [lindex $results 0]}

# prect_33
set x0 [expr -110.0 + $offsetX] 
set y0 [expr 1570.0 + $offsetY] 
set obvar [newO prect $x0 $y0 {no 3}]
set r(prect_33) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(prompt,markupText) {<SABLE></SABLE>
}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {Choose_action}
set ob(dtmf,interrupt) {0}
set ob(words) {{{{$recoValue == "See"}} {} {}} {{{$recoValue == "What"}} {} {}} {{{$recoValue == "This"}} {} {}}}
set ob(grammar) {{} {} {}}

# action_34
set x0 [expr -310.0 + $offsetX] 
set y0 [expr 1660.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_34) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {quit}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {Say "OK. Bye bye!"
closeSegmentPort
closeStringPort}

# action_35
set x0 [expr -90.0 + $offsetX] 
set y0 [expr 740.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_35) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {isUsingRobot}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set usingRobot 1}

# goodbye_36
set x0 [expr -310.0 + $offsetX] 
set y0 [expr 1760.0 + $offsetY] 
set obvar [newO goodbye $x0 $y0 {no 0}]
set r(goodbye_36) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt) {Goodbye.}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {goodbye}
set ob(dtmf,interrupt) {0}

# action_37
set x0 [expr -460.0 + $offsetX] 
set y0 [expr 1040.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_37) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {module_memory}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {Port objectPort
objectPort open "/RAD/objects:i"
ConnectionChecker_Add "/RAD/objects:i" "/iolRADHelper/rpc"

proc objectClose { } {
	objectPort close
}

proc sendIDs { VOCABULORY  } {
	bottle clear
	bottle addString "name"
	for { set i 0 } { $i < [llength $VOCABULORY] } { incr i 1 } {
		bottle addString [lindex $VOCABULORY $i]
	}
	objectPort write bottle reply
	puts "Got reply size of [reply size]  "
	#set VOCABULORY "w0 w1 w2 w3 w4 w5 w6 w7 w8 w9 w10 w11 w12 w13 w14 w15 w16 w17 w18 w19 w20 w21"
	
	if { [ [reply get 0] toString] == "ack" } {
		
		puts "got ACK from helper, setting new vocabulary..."
		set VOCABULORY "[ [reply get 1] toString] [ [reply get 2] toString] [ [reply get 3] toString] [ [reply get 4] toString] [ [reply get 5] toString] [ [reply get 6] toString] [ [reply get 7] toString] [ [reply get 8] toString] [ [reply get 9] toString] [ [reply get 10] toString] [ [reply get 11] toString] [ [reply get 12] toString] [ [reply get 13] toString] [ [reply get 14] toString] [ [reply get 15] toString] [ [reply get 16] toString] [ [reply get 17] toString] [ [reply get 18] toString] [ [reply get 19] toString] [ [reply get 20] toString] [ [reply get 21] toString] "
	} else {
		puts "Got NACK from helper NOT setting new vocabulary..."
	}
	
	return $VOCABULORY
}}

# action_38
set x0 [expr -470.0 + $offsetX] 
set y0 [expr 1120.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_38) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {test}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set VOCABULORY "{purple-car} octopus lego {pink-ball} box toy left middle right "


set WHATEVER [sendIDs $VOCABULORY]
puts " "
puts " "
for { set i 0 } { $i < [llength $WHATEVER] } { incr i 1 } {
	puts "the objects [lindex $WHATEVER $i]"
}

set VOCABULORY $WHATEVER
for { set i 0 } { $i < [llength $VOCABULORY] } { incr i 1 } {
	puts "the VOCABULARY objects [lindex $VOCABULORY $i]"
}







proc getIDs { VOCABULORY w1 w2 w3 w4 w5 w6 w7 w8 w9 w10 w11 w12 w13 w14 w15 w16} {
	
	upvar $w1 tmpW1
	upvar $w2 tmpW2
	upvar $w3 tmpW3
	upvar $w4 tmpW4
	upvar $w5 tmpW5
	upvar $w6 tmpW6
	upvar $w7 tmpW7
	upvar $w8 tmpW8
	upvar $w9 tmpW9
	upvar $w10 tmpW10
	upvar $w11 tmpW11
	upvar $w12 tmpW12
	upvar $w13 tmpW13
	upvar $w14 tmpW14
	upvar $w15 tmpW15
	upvar $w16 tmpW16

	bottle clear
	bottle addString "name"
	for { set i 0 } { $i < [llength $VOCABULORY] } { incr i 1 } {
		bottle addString [lindex $VOCABULORY $i]
	}
	objectPort write bottle reply
	puts "asked IDs"

	set tmpW1 [ [reply get 0] toString]
	set tmpW2 [ [reply get 1] toString]
	set tmpW3 [ [reply get 2] toString]
	set tmpW4 [ [reply get 3] toString]
	set tmpW5 [ [reply get 4] toString]
	set tmpW6 [ [reply get 5] toString]
	set tmpW7 [ [reply get 6] toString]
	set tmpW8 [ [reply get 7] toString]
	set tmpW9 [ [reply get 8] toString]
	set tmpW10 [ [reply get 9] toString]
	set tmpW11 [ [reply get 10] toString]
	set tmpW12 [ [reply get 11] toString]
	set tmpW13 [ [reply get 12] toString]
	set tmpW14 [ [reply get 13] toString]
	set tmpW15 [ [reply get 14] toString]
	set tmpW16 [ [reply get 14] toString]



	puts "[ [reply get 0]  toString]"
	puts "[ [reply get 1]  toString]"
	puts "[ [reply get 2]  toString]"
	puts "[ [reply get 3]  toString]"
	puts "[ [reply get 4]  toString]"
	puts "[ [reply get 5]  toString]"
	puts "[ [reply get 6]  toString]"
	puts "[ [reply get 7]  toString]"
	puts "[ [reply get 8]  toString]"
	puts "[ [reply get 9]  toString]"
	puts "[ [reply get 10]  toString]"
	puts "[ [reply get 11]  toString]"
	puts "[ [reply get 12]  toString]"
	puts "[ [reply get 13]  toString]"
	puts "[ [reply get 14]  toString]"
	puts "[ [reply get 15]  toString]"
	puts "[ [reply get 16]  toString]"

}}

# action_39
set x0 [expr -110.0 + $offsetX] 
set y0 [expr 1360.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_39) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {initialise_Vocabulories_new}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {#Vocabulory for objects

puts " "
puts " "

puts "Initialising vocabulory..."
set VOCABULORY "octopus lego toy ladybug turtle cat"
#set newVocab [sendIDs $VOCABULORY]

puts "the known objects are: "

#for { set i 0 } { $i < [llength $newVocab] } { incr i 1 } {
#	puts "Object [lindex $newVocab $i]"
#}
#set VOCABULORY $newVocab

for { set i 0 } { $i < [llength $VOCABULORY] } { incr i 1 } {
	puts "Expanding vocabulory Object with \"[lindex $VOCABULORY $i]\""
	SM_RGM_Expand "#Object" [lindex $VOCABULORY $i]
}


#Vocabulory for Actions
#puts "Initialising vocabulory..."

set VOCABULORY "{point at} {what is this}"

for { set i 0 } { $i < [llength $VOCABULORY] } { incr i 1 } {
	#puts "Expanding vocabulory Object with \"[lindex $VOCABULORY $i]\""
	SM_RGM_Expand "#Action" [lindex $VOCABULORY $i]
}

puts "Adding \"icub stop\" to the async grammar"
SM_Expand_asyncrecog "icub-stop-now"
puts "Finished setting up Vocabulary"
puts " "
puts " "}

# action_40
set x0 [expr -110.0 + $offsetX] 
set y0 [expr 1720.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_40) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {what}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {What_Is}

# action_41
set x0 [expr -40.0 + $offsetX] 
set y0 [expr 1720.0 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_41) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {this}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set objectName [lindex $results 3]

puts "this is a $objectName"
This_Is $objectName}

####### CONNECTIONS
connect r input_23 action_35 0 -74.0 738.0 -74.0 727.0 -74.0 725.0 $offsetX $offsetY
connect r action_28 action_24 0 -74.0 1058.0 -74.0 1057.0 -74.0 1065.0 $offsetX $offsetY
connect r action_34 goodbye_36 0 -294.0 1738.0 -294.0 1737.0 -294.0 1745.0 $offsetX $offsetY
connect r action_26 action_39 0 -94.0 1338.0 -94.0 1337.0 -94.0 1345.0 $offsetX $offsetY
connect r prect_33 action_40 1 -94.0 1648.0 -94.0 1672.0 -94.0 1705.0 $offsetX $offsetY
connect r prect_25 queryone_27 1 -24.0 1258.0 51.0 1227.0 126.0 1205.0 $offsetX $offsetY
connect r subnet_29 action_30 0 -74.0 898.0 -74.0 887.0 -74.0 885.0 $offsetX $offsetY
connect r action_41 action_32 0 -64.0 1798.0 -59.0 1622.0 -54.0 1455.0 $offsetX $offsetY
connect r action_39 action_32 0 -94.0 1438.0 -94.0 1442.0 -94.0 1455.0 $offsetX $offsetY
connect r prect_25 action_26 0 -84.0 1258.0 -89.0 1247.0 -94.0 1245.0 $offsetX $offsetY
connect r queryone_27 action_24 0 106.0 1298.0 36.0 1177.0 -34.0 1065.0 $offsetX $offsetY
connect r action_35 subnet_29 0 -74.0 818.0 -74.0 807.0 -74.0 805.0 $offsetX $offsetY
connect r action_24 prect_25 0 -74.0 1158.0 -74.0 1157.0 -74.0 1165.0 $offsetX $offsetY
connect r queryone_27 action_26 1 126.0 1298.0 36.0 1267.0 -54.0 1245.0 $offsetX $offsetY
connect r prect_33 action_34 0 -114.0 1648.0 -204.0 1642.0 -294.0 1645.0 $offsetX $offsetY
connect r action_40 action_32 0 -134.0 1798.0 -134.0 1455.0 -94.0 1455.0 $offsetX $offsetY
connect r prect_33 action_41 2 -74.0 1648.0 -49.0 1672.0 -24.0 1705.0 $offsetX $offsetY
connect r action_32 prect_33 0 -94.0 1548.0 -94.0 1547.0 -94.0 1555.0 $offsetX $offsetY
connect r action_30 action_28 0 -74.0 978.0 -74.0 967.0 -74.0 965.0 $offsetX $offsetY

##### SUBDIALOGUE
set offsetX 0
set offsetY 0
set id [registerScreen "Initialisation_Procedures"]
lappend newScreens subnet_29 $id
recordActiveScreen $id

# enter_61
set x0 [expr -10 + $offsetX] 
set y0 [expr 10 + $offsetY] 
set obvar [newO enter $x0 $y0 {no 1}]
set r(enter_61) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {enter}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}

# action_62
set x0 [expr -10 + $offsetX] 
set y0 [expr 200 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_62) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {Yarp_Initialisation}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {load [file join [pwd] libtclyarp.dll] yarp
Network_init
Bottle bottle
Bottle reply

global ConnectionToCheck
set ConnectionToCheck { }

proc ConnectionChecker_Add { p1 p2 } {
set c $p1
set c [lappend c $p2]
   global ConnectionToCheck
   set ConnectionToCheck [lappend ConnectionToCheck $c]
}

proc ConnectionChecker_Check { } {
   global ConnectionToCheck
   set result 1
   foreach c $ConnectionToCheck {
     set p1 [lindex $c 1]
     set p2 [lindex $c 2]
     puts "Checking connection : $p1 $p2"
     if { [NetworkBase_isConnected $p1 $p2] == 0 } {
       puts "Not connected : $p1 $p2"
       set result 0
     }
   }
return $result
}

proc ConnectionChecker_Connect { } {
   global ConnectionToCheck
   set result 1
   foreach c $ConnectionToCheck {
     set p1 [lindex $c 0]
     set p2 [lindex $c 1]
     puts "Connecting : $p1 $p2"
     if { [NetworkBase_connect $p1 $p2] == 0 } {
       puts "Not connected : $p1 $p2"
       set result 0
     }
   }
return $result
}}

# action_63
set x0 [expr 0 + $offsetX] 
set y0 [expr 120 + $offsetY] 
set obvar [newO action $x0 $y0 {no 1}]
set r(action_63) $obvar
upvar #0 $obvar ob
set ob(recogType) {Tree}
set ob(override:recognizer) {0}
set ob(dtmf,mode) {off}
set ob(prompt,type) {tts}
set ob(override:sdet) {0}
set ob(override:vumeter) {0}
set ob(override:tts) {0}
set ob(prompt,recordFlag) {0}
set ob(bargein) {off}
set ob(package) {Base}
set ob(override:caption) {0}
set ob(name) {Helpers_procedures}
set ob(dtmf,interrupt) {0}
set ob(words) {{{} {} {}}}
set ob(grammar) {{}}
set ob(program) {set using_robot 1

proc Say { what } {
tts $what
puts "Say : $what"
}

#return a number between $low and $high
proc Random { low high } {
	return [ expr rand() * [expr $high - $low ] +$low ]
}

#String replace is not available in TCL8.0 so here is a home made one
proc StringReplace {str srcStr destStr} {

set i 1
while { $i != -1 } {
	set i [string first $srcStr $str]
	if { $i != -1} {
#	puts "Found $srcStr at $i"
	set buff [string range $str 0 [expr $i -1]]

	set buff "$buff$destStr"

	set buff "$buff[string range $str [expr $i + [string length $srcStr]] [string length $str]]"

	set str $buff
	}
}
return $str
}}

# exit_64
set x0 [expr -20 + $offsetX] 
set y0 [expr 290 + $offsetY] 
set obvar [newO exit $x0 $y0 {no 0}]
set r(exit_64) $obvar
upvar #0 $obvar ob
set ob(bargein) {off}
set ob(override:recognizer) {0}
set ob(recogType) {Tree}
set ob(dtmf,interrupt) {0}
set ob(dtmf,mode) {off}
set ob(package) {Base}
set ob(override:tts) {0}
set ob(exitStatus) {continue}
set ob(override:caption) {0}
set ob(prompt,type) {tts}
set ob(name) {return:continue}
set ob(override:vumeter) {0}
set ob(override:sdet) {0}
set ob(prompt,recordFlag) {0}

####### CONNECTIONS
connect r action_62 exit_64 0 6.0 278.0 1.0 272.0 -4.0 275.0 $offsetX $offsetY
connect r action_63 action_62 0 16.0 198.0 11.0 187.0 6.0 185.0 $offsetX $offsetY
connect r enter_61 action_63 0 6.0 88.0 11.0 92.0 16.0 105.0 $offsetX $offsetY
recordActiveScreen $p
array set config {arrayName config vumeter,geometry +100+10 warning,load:inappropriate 1 changetrigger 5 alpha,searchsize 100000 beep 1 dtmf,mode off dtmf,endchar 0 tmmods:pause 0 RAD_VERSION 2.0 releaseServices 0 about,comments {Click on the URL above for tutorial details.} backup 1 garbageThreshold -417 alpha,reject 0.1 input live highlight 1 about,author CSLU review 0 rejection 22 alpha,prune 0.0001 default:tts,voice {name mwm} showConsole 0 reRun 0 confirm,nuke 1 RAD_PATCHLEVEL 0 caption 0 stdevMic 30 palette,zoom 100 dtmf,var {} defaultTtsDevice {type Festival} useRepair 1 confirm,clear 1 palette,stick 1 ttsDevice {type Festival hostname *} about,date 06/27/99 confirm,quit 1 palette,rows {} lsilence 5000 pronun,tts 1 changerate 5 audioDevice {type audio hostname local name {Line 1/2 (3- M-Audio FastTrack }} snapToGrid 1 longpen 0.135 confirm,newload 1 palette,columns 2 backoff 150 dtmf,maxlen 1 mic,device 0 showCanvas 1 dyn:recog 0 mic,key <Space> dtmf,timeout 5000 tsilence 300 mic,event 0 tts,pitch 158 beepwave {C:/Program Files/CSLU/Toolkit/2.0/apps/rad/endbeep.wav} vumeter,enabled 1 bargein 0 about,url docs/2.0/apps/rad/tutorials/tutorial015/index.html active 1.0 confirm,new 1 dataCapture 0 configfile C:/Users/icub/.rad/config.tcl visual,iMode 0 defaultAudioDevice {type audio hostname local} alpha,deletepen 0.05 edit,noEmptyPrompt 1 wordspot 30 tts,rate 1.00 repairFile {C:/Program Files/CSLU/Toolkit/2.0/apps/rad/Repair/default1.rad} tmmods:listallmedia 0 runTrace 0 prompt,dir C:/.rad pronun,customdict 1 ttsCache 0 maxrec 100 alpha,langpower 0.0 tmmods:extralogging 0 faces {} audio tv baldi 0 tts,pitchrange 34 dtmf,interrupt 0 nbest 4 pronun,localdict 1 edit,usedFacesOnly 1 paths {configfile {Configuration File} beepwave {Beep File} prompt,dir {Prompt Directory} repairFile {Default Repair File}} recognizer {name adult_english_16khz_0.ob infoLang * infoDial * infoRate * infoDesc *} showRecog 0 shortpen 0.0025 pronun,cmu 1 tmmods:iconlook 0 recogMode 1 face,type CUAnimate tts,voice {name mwm language English dialect * gender *} visual,DCP 0 cachesize 100}

