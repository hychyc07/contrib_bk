<module>
    <!-- module's name should match its executable file's name. -->
    <name>dmpLearner</name>
    <description>A module for actions' learning and generalization through DMP representation.</description>
    <version>1.0</version>

    <!-- <arguments> can have multiple <param> tags-->
    <arguments>
	<param default="" desc="configuration file name"> from </param>
	<param default="" desc="select the current context"> context </param>
	<param default="1.0" desc="alpha_x time constant"> alphax </param>
	<param default="1.0" desc="alpha_z time constant"> alphaz </param>
	<param default="1.0" desc="beta_z time constant"> betaz </param>
	<param default="27" desc="number of radial basis functions for non-linear part of DMP"> N</param>
    </arguments>

    <!-- <authors> can have multiple <author> tags. -->
    <authors>
        <author email="elena.ceseracciu@iit.it"> Elena Ceseracciu </author>
        <author email="vadim.tikhanoff@iit.it"> Vadim Tikhanoff </author>
    </authors>

     <!-- <data> can have multiple <input> or <output> tags. -->
     <data>
	<input>
            <type>iCub_dmpLearner.dmpLearnerInterface</type>
            <port carrier="tcp">/dmpLearner/rpc</port>
            <required>no</required>
            <priority>no</priority>
            <description>rpc port that implements the server of iCub_dmpLearner Thrift interface</description>
        </input>
        <output>
            <type>Rpc</type>
            <port carrier="tcp">/dmpLearner/opc:rpc</port>
            <description>rpc port to communicate with OPC</description>
        </output>

    </data>

    <!-- physical and logical resource dependencies can be introduced in this
         section. Dependencies must follow resource conceptional models. Currently
         available resource models are 'memory', 'processor', 'storage', 'network',
         'yarp_port', 'platform' and 'gpu'. All resource dependencies should be introduced
         inside <computer></computer> tags. While resources described inside <computer>
         tags represent conjunctional dependency, resources from different <computer>
         tags can be seen as disjunctions. Meaning that If a module depend on either
         resource R1 or R2 they can be introduced inside two different <computer> tags.
         Resource dependencies should be introduced if they are really required. For
         example, if module's performance drops significantly in case of memory swapping,
         a memory resource dependency can be introduced with the required memory space. -->
    <dependencies>
        <computer>
        </computer>
    </dependencies>

    <!-- specific libraries or header files which are used for development -->
    <development>
        <header></header>
        <library></library>
    </development>

</module>

